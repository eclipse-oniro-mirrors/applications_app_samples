/// <reference types="node" />
import { ModuleTargetData } from './data/hap-task-target-data.js';
import { CodeType } from '../enum/code-type-enum.js';
import { OhosHapTask } from './task/ohos-hap-task.js';
import { SyncOptions } from 'execa';
import { TargetTaskService } from './service/target-task-service.js';
import { CodeModel } from '../model/code-source/code-model.js';
import { TaskDetails } from '@ohos/hvigor-base';
import { FileSet } from '@ohos/hvigor-base/src/internal/snapshot/util/file-set.js';
import { TaskInputValue } from '@ohos/hvigor-base/src/internal/snapshot/util/task-input-value-entry.js';
import { LoaderEnv } from '../options/loader-env.js';
/**
 * 调用loader编译新模型的js/ets源码
 *
 * @since 2022/1/10
 */
export declare class CompileNode extends OhosHapTask {
    private _log;
    protected readonly codeType: CodeType;
    protected readonly commonOption: NodeJS.ProcessEnv;
    private readonly _webpackPath;
    protected readonly codeModel: CodeModel | undefined;
    private readonly aceModuleJsonPath;
    private readonly resProfileDir;
    private readonly resourceTable;
    protected readonly aceBuildJsonDir: string;
    protected aceModuleBuild: string;
    protected readonly loaderWorkDir: string;
    private readonly webpackConfig;
    protected readonly sourcePath: string | undefined;
    protected readonly aceSuperVisualPath: string;
    private readonly isArkModule;
    protected readonly mainCodePath: string | undefined;
    constructor(taskService: TargetTaskService, codeType: CodeType, taskDetails: TaskDetails);
    static getCompileNodeTaskName(codeType: CodeType, taskPrefix: string): string;
    initTaskDepends(): void;
    declareInputs(): Map<string, TaskInputValue>;
    declareOutputFiles(): FileSet;
    declareInputFiles(): FileSet;
    protected getAllExistHarSrcPath(): string[];
    protected getAllExistDependentMainPath(): string[];
    protected doTaskAction(): void;
    protected taskShouldDo(): boolean;
    /**
     * 移动_releaseMap到临时目录
     *
     * @param {ModuleTargetData} targetData
     * @param {string} abilityPath 老模型的_releaseMap需要会拷贝一级目录到abilityPath
     * @protected
     */
    protected moveReleaseMap(targetData: ModuleTargetData, abilityPath?: string): void;
    protected doRealLoaderCompile(cmdEnv: LoaderEnv, callback: Function, callbackInput: unknown[], targetWorkers?: number[]): void;
    protected beforeTask(): void;
    protected getInputData(cmdEnv: NodeJS.ProcessEnv, commandLine: string[]): {
        moduleName: string;
        taskName: string;
        commandLine: string[];
        commandOptions: SyncOptions<null>;
    };
    private generateLoaderEnv;
    private validateModuleJson;
    protected validateModulePage(): void;
    protected validateModuleSrcEntrance(): void;
    /**
     * 工具链的临时目录根据debug维度和compileMode维度在区分一层
     *
     * @param {ModuleTargetData} targetData
     * @returns {string}
     * @protected
     */
    protected getTaskTempDir(targetData: ModuleTargetData): string;
}
