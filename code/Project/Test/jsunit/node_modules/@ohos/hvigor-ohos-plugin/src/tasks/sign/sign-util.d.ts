import { ProjectBuildProfile } from '../../options/build/project-build-profile';
import { SignModel } from './command-builder-impl/sign-model';
import { TaskService } from '../service/task-service';
import { SignTypeEnum } from '../../enum/sign-type-enum.js';
import { SdkInfo } from '../../sdk/sdk-info.js';
import { ModulePathInfoIml } from '../../common/iml/module-path-info-iml.js';
import { ProjectPathInfoIml } from '../../common/iml/project-path-info-iml.js';
import SigningConfigBuildOpt = ProjectBuildProfile.SigningConfigBuildOpt;
import MaterialBuildOpt = ProjectBuildProfile.MaterialBuildOpt;
import { FileSet } from '@ohos/hvigor-base/src/internal/snapshot/util/file-set.js';
import { TaskInputValue } from '@ohos/hvigor-base/src/internal/snapshot/util/task-input-value-entry.js';
/**
 * 执行签名的工具类
 *
 * @since 2022/1/21
 */
export declare class SignUtil {
    private _log;
    private readonly _taskService;
    private readonly _signType;
    private readonly _targetProduct;
    private readonly _signCommandFactory;
    protected readonly _pathInfo: ModulePathInfoIml | ProjectPathInfoIml;
    readonly _signingConfig: SigningConfigBuildOpt | undefined;
    _signingConfigCheckLogStr: string | undefined;
    private sdkInfo;
    constructor(taskService: TaskService, signType: SignTypeEnum, pathInfo: ModulePathInfoIml | ProjectPathInfoIml, targetProduct: ProjectBuildProfile.ProductBuildOpt, sdkInfo: SdkInfo);
    /**
     * 执行签名公共接口
     *
     * @param {SignModel} signModel 签名类型、输入、输出参数
     */
    sign(signModel: SignModel): void;
    /**
     * 签名配置文件与hap包BundleName校验
     *
     * @param {signModel | undefined} signModel
     * @param {ModulePathInfoIml | ProjectPathInfoIml} pathInfo
     * @private
     */
    private validateBundleName;
    /**
     * 执行签名命令
     *
     * @param {signModel} signModel
     * @private
     */
    private executeSign;
    /**
     * 获取签名配置项
     *
     * @return {SigningConfigBuildOpt | undefined} 签名配置
     * @private
     */
    private getSigningConfig;
    /**
     * 获取默认签名配置
     *
     * @returns {ProjectBuildProfile.SigningConfigBuildOpt}
     */
    static getDefaultSign(): SigningConfigBuildOpt;
    /**
     * 判断签名材料是否是默认签名
     *
     * @param {MaterialBuildOpt} currentSignMaterial
     * @returns {boolean}
     */
    static isUseDefaultShellSign(currentSignMaterial: MaterialBuildOpt): boolean;
    /**
     * 根据签名类型、输入、输出参数获取签名命令
     *
     * @param {signModel} signModel 签名类型、输入、输出参数
     * @private
     */
    private getSignCommand;
    /**
     * 获取签名材料的的增量输入
     *
     * @return {Map<string, TaskInputValue>} 签名配置增量输入对象
     */
    getSigningConfigInputs(): Map<string, TaskInputValue>;
    /**
     * 获取签名材料的的增量输入文件
     *
     * @return {FileSet} 签名配置增量文件输入对象
     */
    getSigningConfigInputFiles(): FileSet;
}
