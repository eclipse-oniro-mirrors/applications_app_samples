import { LegacyTargetSourceSetModel, SourceSetModel, TargetSourceSetModel } from '../source-set/source-set-model.js';
import { ModuleModel } from './module-model.js';
import { ModuleBuildProfile } from '../../options/build/module-build-profile.js';
import { ModuleType } from '../../enum/module-type-enum.js';
import { ProjectModel } from '../project/project-model.js';
import { ConfigJson } from '../../options/configure/config-json-options.js';
import { ModuleJson } from '../../options/configure/module-json-options.js';
import { ApiType } from '../../project/data/hap-extra-info.js';
import { Module } from '@ohos/hvigor-base';
import { CompileModeEnum } from '../../enum/compile-mode-enum.js';
import ConfigOptObj = ConfigJson.ConfigOptObj;
declare type SourceSetModelType = TargetSourceSetModel | LegacyTargetSourceSetModel;
/**
 * hvigor 工程的module模块的数据管理对象
 *
 * @since 2022/2/23
 */
export declare abstract class CoreModuleModelImpl implements ModuleModel {
    private readonly module;
    private readonly name;
    private readonly modulePath;
    private readonly parentProject;
    private readonly buildProfilePath;
    private readonly moduleBuildOpt;
    protected readonly _sourceRootDir: string;
    protected targetSourceSetMap: Map<string, SourceSetModelType>;
    protected constructor(module: Module, parentProject: ProjectModel);
    abstract isAtomicService(): boolean;
    abstract isInstallFree(): boolean;
    abstract getDeviceTypes(): string[];
    abstract getJsonObjByTargetName(targetName: string): ConfigOptObj | ModuleJson.ModuleOptObj;
    abstract initDefaultTargetSourceSet(): void;
    abstract getModuleType(): ModuleType;
    abstract getSourceSetByTargetName(targetName: string): SourceSetModel;
    abstract getJsonPathByTargetName(targetName: string): string;
    getRelatedEntryModules(): string[];
    getSourceRootByTargetName(targetName?: string): string;
    getBuildProfileName(): string;
    getName(): string;
    getProjectDir(): string;
    getParentProject(): ProjectModel;
    getPackageJsonPath(): string;
    getProfilePath(): string;
    getProfileOpt(): ModuleBuildProfile.ModuleBuildOpt;
    isArkModule(): boolean;
    /**
     * 根据模块的运行时配置文件module.json5/config.json来获取取模块的类型信息
     *
     * @returns {boolean} true/false
     */
    isHapModule(): boolean;
    /**
     * 根据模块的运行时配置文件module.json5/config.json来获取取模块的类型信息
     *
     * @returns {boolean} true/false
     */
    isHarModule(): boolean;
    getCompileApiVersion(): number;
    getCompatibleApiVersion(): number;
    getAllModules(): ModuleModel[];
    getApiType(): ApiType;
    getCompileMode(): CompileModeEnum;
    moduleBuildProfileCheck(isHapModule: boolean): void;
    getModule(): Module;
    processTargetsConfig(): void;
}
export {};
