"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
 *
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const module_1 = __importDefault(require("module"));
const typescript_1 = __importDefault(require("typescript"));
const fs_1 = __importDefault(require("fs"));
const compile_options_js_1 = require("@ohos/hvigor-base/src/util/options/compile-options.js");
const to = {
    compilerOptions: compile_options_js_1.compilerOptions
};
function extensionHandler(module, filename) {
    const fileFullPath = path.resolve(__dirname, filename);
    const content = fs_1.default.readFileSync(fileFullPath, 'utf-8');
    const res = typescript_1.default.transpileModule(content, to);
    module._compile(res.outputText, filename);
}
function addExtensionHandler(suffixes) {
    for (const suffix of suffixes) {
        module_1.default._extensions[suffix] = extensionHandler;
    }
}
addExtensionHandler(['.ts', '.mjs']);
//# sourceMappingURL=require-hook.js.map