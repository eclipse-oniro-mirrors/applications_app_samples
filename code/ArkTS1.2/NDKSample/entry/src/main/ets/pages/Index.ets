/**
 *
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 *
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice,this
 * list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * THIS IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS,
 *
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

'use static'

import { Entry, Text, Column, Component, Button, ClickEvent, UIContext, Builder, ComponentContent, wrapBuilder, ContentSlot } from '@ohos.arkui.component'
import { BuilderNode, NodeController, NodeContent } from '@ohos.arkui.node';
import { State } from '@ohos.arkui.stateManagement'
import hilog from '@ohos.hilog'

interface Param {
  str: string
}

@Builder
function ArkTsBuilder(param: Param) {
  Column() {
    Text(param.str)
      .fontSize(18)
  }
  .width(200)
  .height(100)
}

class NativeKit {
  native GetNodeHandleFromAniValueTest(componentContent: ComponentContent<Param>, rootSlot: NodeContent): int;
  native GetContextFromAniValueTest(context: UIContext, rootSlot: NodeContent): int;
}

@Entry
@Component
struct Index {
  @State stateVar: string = "state var";
  private rootSlot: NodeContent = new NodeContent();

  createArkTsNodeTree(): ComponentContent<Param> {
    let content: ComponentContent<Param> = new ComponentContent<Param>(this.getUIContext(), wrapBuilder(ArkTsBuilder),
      { str: 'testComponentContent' } as Param);
    return content;
  }

  aboutToAppear() {

  }

  build() {
    Column(undefined) {
      // Native组件挂载点。
      ContentSlot(this.rootSlot)
      Button('GetContextFromAniValueTest')
        .onClick((e: ClickEvent) => {
          try {
            loadLibrary('entry')
          } catch (e: Error) {
            hilog.error(0x0000, 'testTag', 'loadFailed', e);
          }
          let nativeKit = new NativeKit();
          nativeKit.GetContextFromAniValueTest(this.getUIContext(), this.rootSlot);
        })
      Button('GetNodeHandleFromAniValueTest')
        .onClick((e: ClickEvent) => {
          try {
            loadLibrary('entry')
          } catch (e: Error) {
            hilog.error(0x0000, 'testTag', 'loadFailed', e);
          }
          let nativeKit = new NativeKit();
          nativeKit.GetNodeHandleFromAniValueTest(this.createArkTsNodeTree(), this.rootSlot);
        })
    }
    .width('100%')
  }
}