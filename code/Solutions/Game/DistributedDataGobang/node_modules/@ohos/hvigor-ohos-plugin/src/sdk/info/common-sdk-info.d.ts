import { Component, PathAndApiVersion, SdkInfoHandler } from '@ohos/sdkmanager-common';
import { SdkVersion } from '../../version/sdk-version.js';
import { SdkEtsComponent } from '../impl/sdk-ets-component.js';
import { SdkJsComponent } from '../impl/sdk-js-component.js';
import { SdkNativeComponent } from '../impl/sdk-native-component.js';
import { SdkToolchainsComponent } from '../impl/sdk-toolchains-component.js';
export declare abstract class CommonSdkInfo {
    private LOGGER;
    protected sdkDir: string;
    protected sdkVersion: number;
    protected jsComponent: SdkJsComponent | undefined;
    protected etsComponent: SdkEtsComponent | undefined;
    protected nativeComponent: SdkNativeComponent | undefined;
    protected toolchainsComponent: SdkToolchainsComponent | undefined;
    protected localLibComponents: Map<PathAndApiVersion, Component>;
    protected constructor(sdkVersion: number, sdkDir: string);
    abstract getSdkHandler(): SdkInfoHandler;
    /**
     * 获取当前sdk中对应api 的toolchains组件的小版本号
     *
     * @return {string | undefined}
     */
    getToolchainsComponentVersion(): string | undefined;
    getModuleSchema(): string;
    getAppSchema(): string;
    getFormSchema(): string;
    getSdkJsDir(): string;
    getSdkEtsDir(): string;
    getSdkVersion(): number;
    getHapTobin(): string;
    getReleaseType(): string;
    getSdkNativeDir(): string;
    getCmakeTool(): string;
    getNativeNinjaTool(): string;
    getNativeToolchain(): string;
    getNdkVersion(): SdkVersion;
    getSdkToolchainsDir(): string;
    getRestool(): string;
    getSysCapTool(): string;
    getSysCapFileInEts(): string;
    getSysCapFileInJs(): string;
    getVerifySignConfigTool(): string;
    getJsArkVersion(): string;
    getRichSchema(): string;
    getLiteSchema(): string;
    getEtsArkVersion(): string;
    getArkVersion(): string;
    getPackageTool(): string;
    getSignDir(): string;
    getJsLoader(): string;
    getEtsLoader(): string;
    requireUISyntax(): boolean;
    /**
     * 判断是否是preview构建，且sdk restool工具支持增量编译
     *
     * @param {boolean} isHarmonyOS 是否是HarmonyOS工程
     * @return {boolean} true是，false否
     */
    isPreviewCompileResourceIncrement(isHarmonyOS: boolean): boolean;
    /**
     * 根据传入的需要的实例类型查找本地sdk是否有对应sdk
     *
     * @param type 需要的实例类型
     * @param all
     * @private
     */
    protected findLocalComponent(type: string, all: Map<PathAndApiVersion, Component>): Component;
    /**
     * 根据获取到的sdk-component名称创建不同的component实例
     *
     * @param component
     */
    protected initComponent(component: Component): void;
    /**
     * 检查、下载SDK组件公共方法
     *
     * @param {PathAndApiVersion[]} pathAndApis
     * @param {SdkInfoHandler} sdkHandler
     * @param {Map<PathAndApiVersion, Component>} localLibComponents
     * @param {boolean} isInit 是否需要initComponent
     * @protected
     */
    protected downloadWithInitComponent(pathAndApis: PathAndApiVersion[], sdkHandler: SdkInfoHandler, localLibComponents: Map<PathAndApiVersion, Component>, isInit?: boolean): void;
}
