/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { hilog } from '@kit.PerformanceAnalysisKit';
import { describe, expect, it } from '@ohos/hypium';
import { abilityDelegatorRegistry, Driver, ON } from '@kit.TestKit';
import { UIAbility } from '@kit.AbilityKit';

// 常量定义
const DOMAIN: number = 0xF812; // 日志域值
const TAG: string = 'LoggerTest'; // 日志标签
const BUNDLE: string = 'LOGGERSAMPLE_'; // 测试用例前缀
const BUNDLENAME: string = 'com.samples.netconnection'; // 应用包名
let driver: Driver = Driver.create();

const DELAY_MS: number = 3000; // 延迟时间
const delegator = abilityDelegatorRegistry.getAbilityDelegator();

export default function LoggerTest() {
  describe('LoggerTest', () => {
    /**
     * @tc.number StartAbility_001
     * @tc.name StartAbility_001
     * @tc.desc 启动Ability
     */
    it(BUNDLE + 'StartAbility_001', 0, async (done: Function) => {
      hilog.info(DOMAIN, TAG, BUNDLE + 'StartAbility_001 begin');
      // start tested ability
      const want: Want = {
        bundleName: BUNDLENAME,
        abilityName: 'EntryAbility',
      };
      await delegator.startAbility(want);
      await driver.delayMs(DELAY_MS);
      const ability: UIAbility = await delegator.getCurrentTopAbility();
      expect(ability.context.abilityInfo.name).assertEqual('EntryAbility');
      done();
      hilog.info(DOMAIN, TAG, BUNDLE + 'StartAbility_001 end');
    });

    /**
     * @tc.number Logger_case_001
     * @tc.name Logger_case_001
     * @tc.desc 测试 "GetDefaultNet" 按钮点击效果
     */
    it(BUNDLE + 'Logger_case_001', 0, async (done: Function) => {
      hilog.info(DOMAIN, TAG, BUNDLE + 'Logger_case_001 begin');
      await driver.delayMs(DELAY_MS);
      // 验证按钮存在
      await driver.assertComponentExist(ON.id('get-default-net-btn'));
      let button = await driver.findComponent(ON.id('get-default-net-btn'));
      await button.click(); // 点击按钮
      await driver.delayMs(DELAY_MS);
      // 验证日志输出
      let loggerOutput = await driver.findComponent(ON.id('logger-output'));
      let result = await loggerOutput.getText();
      expect(result).assertContain('The defaultNetId is');
      hilog.info(DOMAIN, TAG, BUNDLE + 'Logger_case_001 end');
      done();
    });

    /**
     * @tc.number Logger_case_002
     * @tc.name Logger_case_002
     * @tc.desc 测试 "CodeNumber" 按钮点击效果
     */
    it(BUNDLE + 'Logger_case_002', 0, async (done: Function) => {
      hilog.info(DOMAIN, TAG, BUNDLE + 'Logger_case_002 begin');
      await driver.delayMs(DELAY_MS);
      // 验证按钮存在
      await driver.assertComponentExist(ON.id('get-code-number-btn'));
      let button = await driver.findComponent(ON.id('get-code-number-btn'));
      await button.click(); // 点击按钮
      await driver.delayMs(DELAY_MS);
      // 验证日志输出
      let loggerOutput = await driver.findComponent(ON.id('logger-output'));
      let result = await loggerOutput.getText();

      // 断言日志内容是否为预期的参数错误
      expect(result).assertContain('success');
      hilog.info(DOMAIN, TAG, BUNDLE + 'Logger_case_002 end');
      done();
    });

    /**
     * @tc.number Logger_case_003
     * @tc.name Logger_case_003
     * @tc.desc 测试 "HasDefaultNet" 按钮点击效果
     */
    it(BUNDLE + 'Logger_case_003', 0, async (done: Function) => {
      hilog.info(DOMAIN, TAG, BUNDLE + 'Logger_case_003 begin');
      await driver.delayMs(DELAY_MS);
      // 验证按钮存在
      await driver.assertComponentExist(ON.id('check-default-net-btn'));
      let button = await driver.findComponent(ON.id('check-default-net-btn'));
      await button.click(); // 点击按钮
      await driver.delayMs(DELAY_MS);
      // 验证日志输出
      let loggerOutput = await driver.findComponent(ON.id('logger-output'));
      let result = await loggerOutput.getText();
      expect(result).assertContain('The default network is activated.');
      hilog.info(DOMAIN, TAG, BUNDLE + 'Logger_case_003 end');
      done();
    });

    /**
     * @tc.number Logger_case_004
     * @tc.name Logger_case_004
     * @tc.desc 测试 "IsDefaultNetMetered" 按钮点击效果
     */
    it(BUNDLE + 'Logger_case_004', 0, async (done: Function) => {
      hilog.info(DOMAIN, TAG, BUNDLE + 'Logger_case_004 begin');
      await driver.delayMs(DELAY_MS);
      // 验证按钮存在
      await driver.assertComponentExist(ON.id('check-default-net-metered-btn'));
      let button = await driver.findComponent(ON.id('check-default-net-metered-btn'));
      await button.click(); // 点击按钮
      await driver.delayMs(DELAY_MS);
      // 验证日志输出
      let loggerOutput = await driver.findComponent(ON.id('logger-output'));
      let result = await loggerOutput.getText();
      expect(result).assertContain('The default network data usage is metered');
      hilog.info(DOMAIN, TAG, BUNDLE + 'Logger_case_004 end');
      done();
    });

    /**
     * @tc.number Logger_case_005
     * @tc.name Logger_case_005
     * @tc.desc 测试 "GetConnectionProperties" 按钮点击效果
     */
    it(BUNDLE + 'Logger_case_005', 0, async (done: Function) => {
      hilog.info(DOMAIN, TAG, BUNDLE + 'Logger_case_005 begin');
      await driver.delayMs(DELAY_MS);
      // 验证按钮存在
      await driver.assertComponentExist(ON.id('get-connection-properties-btn'));
      let button = await driver.findComponent(ON.id('get-connection-properties-btn'));
      await button.click(); // 点击按钮
      await driver.delayMs(DELAY_MS);
      // 验证日志输出
      let loggerOutput = await driver.findComponent(ON.id('logger-output'));
      let result = await loggerOutput.getText();
      expect(result).assertContain('Error fetching connection properties');
      hilog.info(DOMAIN, TAG, BUNDLE + 'Logger_case_005 end');
      done();
    });

    /**
     * @tc.number Logger_case_006
     * @tc.name Logger_case_006
     * @tc.desc 测试 "GetNetCapabilities" 按钮点击效果
     */
    it(BUNDLE + 'Logger_case_006', 0, async (done: Function) => {
      hilog.info(DOMAIN, TAG, BUNDLE + 'Logger_case_006 begin');
      await driver.delayMs(DELAY_MS);
      // 验证按钮存在
      await driver.assertComponentExist(ON.id('get-net-capabilities-btn'));
      let button = await driver.findComponent(ON.id('get-net-capabilities-btn'));
      await button.click(); // 点击按钮
      await driver.delayMs(DELAY_MS);
      // 验证日志输出
      let loggerOutput = await driver.findComponent(ON.id('logger-output'));
      let result = await loggerOutput.getText();
      expect(result).assertContain('Error fetching network capabilities');
      hilog.info(DOMAIN, TAG, BUNDLE + 'Logger_case_006 end');
      done();
    });

    /**
     * @tc.number Logger_case_007
     * @tc.name Logger_case_007
     * @tc.desc 测试 "GetDefaultHttpProxy" 按钮点击效果
     */
    it(BUNDLE + 'Logger_case_007', 0, async (done: Function) => {
      hilog.info(DOMAIN, TAG, BUNDLE + 'Logger_case_007 begin');
      await driver.delayMs(DELAY_MS);
      // 验证按钮存在
      await driver.assertComponentExist(ON.id('get-default-http-proxy-btn'));
      let button = await driver.findComponent(ON.id('get-default-http-proxy-btn'));
      await button.click(); // 点击按钮
      await driver.delayMs(DELAY_MS);
      // 验证日志输出
      let loggerOutput = await driver.findComponent(ON.id('logger-output'));
      let result = await loggerOutput.getText();
      expect(result).assertContain('Successfully fetched the default HTTP proxy configuration');
      hilog.info(DOMAIN, TAG, BUNDLE + 'Logger_case_007 end');
      done();
    });

    /**
     * @tc.number Logger_case_008
     * @tc.name Logger_case_008
     * @tc.desc 测试 "GetAddrInfo" 按钮点击效果
     */
    it(BUNDLE + 'Logger_case_008', 0, async (done: Function) => {
      hilog.info(DOMAIN, TAG, BUNDLE + 'Logger_case_008 begin');
      await driver.delayMs(DELAY_MS);
      // 验证按钮存在
      await driver.assertComponentExist(ON.id('get-addr-info-btn'));
      let button = await driver.findComponent(ON.id('get-addr-info-btn'));
      await button.click(); // 点击按钮
      await driver.delayMs(DELAY_MS);
      // 验证日志输出
      let loggerOutput = await driver.findComponent(ON.id('logger-output'));
      let result = await loggerOutput.getText();
      expect(result).assertContain('Error fetching DNS info');
      hilog.info(DOMAIN, TAG, BUNDLE + 'Logger_case_008 end');
      done();
    });

    /**
     * @tc.number Logger_case_009
     * @tc.name Logger_case_009
     * @tc.desc 测试 "GetAllNets" 按钮点击效果
     */
    it(BUNDLE + 'Logger_case_009', 0, async (done: Function) => {
      hilog.info(DOMAIN, TAG, BUNDLE + 'Logger_case_009 begin');
      await driver.delayMs(DELAY_MS);
      // 验证按钮存在
      await driver.assertComponentExist(ON.id('get-all-nets-btn'));
      let button = await driver.findComponent(ON.id('get-all-nets-btn'));
      await button.click(); // 点击按钮
      await driver.delayMs(DELAY_MS);
      // 验证日志输出
      let loggerOutput = await driver.findComponent(ON.id('logger-output'));
      let result = await loggerOutput.getText();
      expect(result).assertContain('Successfully fetched all active network handles');
      hilog.info(DOMAIN, TAG, BUNDLE + 'Logger_case_009 end');
      done();
    });

    /**
     * @tc.number Logger_case_010
     * @tc.name Logger_case_010
     * @tc.desc 测试 "RegisterDnsResolver" 按钮点击效果
     */
    it(BUNDLE + 'Logger_case_010', 0, async (done: Function) => {
      hilog.info(DOMAIN, TAG, BUNDLE + 'Logger_case_010 begin');
      await driver.delayMs(DELAY_MS);
      // 验证按钮存在
      await driver.assertComponentExist(ON.id('register-dns-resolver-btn'));
      let button = await driver.findComponent(ON.id('register-dns-resolver-btn'));
      await button.click(); // 点击按钮
      await driver.delayMs(DELAY_MS);
      // 验证日志输出
      let loggerOutput = await driver.findComponent(ON.id('logger-output'));
      let result = await loggerOutput.getText();
      expect(result).assertContain('Successfully registered custom DNS resolver');
      hilog.info(DOMAIN, TAG, BUNDLE + 'Logger_case_010 end');
      done();
    });

    /**
     * @tc.number Logger_case_011
     * @tc.name Logger_case_011
     * @tc.desc 测试 "UnregisterDnsResolver" 按钮点击效果
     */
    it(BUNDLE + 'Logger_case_011', 0, async (done: Function) => {
      hilog.info(DOMAIN, TAG, BUNDLE + 'Logger_case_011 begin');
      await driver.delayMs(DELAY_MS);
      // 验证按钮存在
      await driver.assertComponentExist(ON.id('unregister-dns-resolver-btn'));
      let button = await driver.findComponent(ON.id('unregister-dns-resolver-btn'));
      await button.click(); // 点击按钮
      await driver.delayMs(DELAY_MS);
      // 验证日志输出
      let loggerOutput = await driver.findComponent(ON.id('logger-output'));
      let result = await loggerOutput.getText();
      expect(result).assertContain('Successfully unregistered custom DNS resolver');
      hilog.info(DOMAIN, TAG, BUNDLE + 'Logger_case_011 end');
      done();
    });
  });
}
