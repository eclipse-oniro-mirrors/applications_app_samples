/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import Logger from '../common/Logger';
import { hilog } from '@kit.PerformanceAnalysisKit';

// [Start build_project5]
import testNetManager from 'libentry.so';

enum ReturnCode {
  SUCCESS = 0, // 操作成功
  MISSING_PERMISSION = 201, // 缺少权限
  PARAMETER_ERROR = 401, // 参数错误
}

// [StartExclude build_project5]
// 常量定义
interface SizeOptions {
  SMALL: number;
  MEDIUM: number;
  LARGE?: number;
}

const BORDER_RADIUS: number = 5; // 按钮圆角大小
const BUTTON_HEIGHT: number = 50; // 按钮高度

// 字体大小定义
const FONT_SIZE: SizeOptions = {
  SMALL: 16, // 小号字体
  MEDIUM: 20, // 中号字体
  LARGE: 50, // 大号字体
};

// 边距定义
const MARGIN: SizeOptions = {
  SMALL: 10, // 小边距
  MEDIUM: 20, // 中边距
  LARGE: 30, // 大边距
};

interface NetHandle {
  netId: number;
}
// [EndExclude build_project5]
@Entry
@Component
struct Index {
  @State message: string = ''; // 用于展示日志消息
  // [StartExclude build_project5]
  @State logMessage: string = ''; // 用于展示 Logger 输出的日志
  // [EndExclude build_project5]

  build() {
    Column() { // 显示 Logger 输出的日志
      // [StartExclude build_project5]
      Text(this.logMessage)
        .fontSize(FONT_SIZE.SMALL)
        .fontColor(Color.Black)
        .margin({ bottom: MARGIN.SMALL })
        .id('logger-output') // 为日志输出设置 ID，便于测试获取内容
      // 显示测试消息
      // [EndExclude build_project5]
      Text(this.message)
        .fontSize(16)
        .fontColor(Color.Black)
        .margin({ bottom: 10 })
        .id('test-message') // 为测试消息设置 ID，便于测试获取内容

      Button($r('app.string.GetDefaultNet'))
        .onClick(() => {
          this.GetDefaultNet();
        })
          // [StartExclude build_project5]
        .width('80%')
        .height(BUTTON_HEIGHT)
        .margin({ top: MARGIN.SMALL })
        .backgroundColor(Color.Blue)
        .fontColor(Color.White)
        .fontSize(FONT_SIZE.SMALL)
        .borderRadius(BORDER_RADIUS)
        .id('get-default-net-btn') // 为按钮设置 ID，便于测试点击
          // [EndExclude build_project5]

      Button($r('app.string.CodeNumber'))
        .onClick(() => {
          this.CodeNumber();
        })
          // [StartExclude build_project5]
        .width('80%')
        .height(BUTTON_HEIGHT)
        .margin({ top: MARGIN.SMALL })
        .backgroundColor(Color.Green)
        .fontColor(Color.White)
        .fontSize(FONT_SIZE.SMALL)
        .borderRadius(BORDER_RADIUS)
        .id('get-code-number-btn')

      Button($r('app.string.HasDefaultNet'))
        .onClick(() => {
          this.GetHasDefaultNet();
        })
        .width('80%')
        .height(BUTTON_HEIGHT)
        .margin({ top: MARGIN.SMALL })
        .backgroundColor(Color.Orange)
        .fontColor(Color.White)
        .fontSize(FONT_SIZE.SMALL)
        .borderRadius(BORDER_RADIUS)
        .id('check-default-net-btn')

      Button($r('app.string.IsDefaultNetMetered'))
        .onClick(() => {
          this.GetIsDefaultNetMetered();
        })
        .width('80%')
        .height(BUTTON_HEIGHT)
        .margin({ top: MARGIN.SMALL })
        .backgroundColor(Color.Grey)
        .fontColor(Color.White)
        .fontSize(FONT_SIZE.SMALL)
        .borderRadius(BORDER_RADIUS)
        .id('check-default-net-metered-btn')

      Button($r('app.string.GetConnectionProperties'))
        .onClick(() => {
          this.GetConnectionProperties();
        })
        .width('80%')
        .height(BUTTON_HEIGHT)
        .margin({ top: MARGIN.SMALL })
        .backgroundColor(Color.Brown)
        .fontColor(Color.White)
        .fontSize(FONT_SIZE.SMALL)
        .borderRadius(BORDER_RADIUS)
        .id('get-connection-properties-btn')

      Button($r('app.string.GetNetCapabilities'))
        .onClick(() => {
          this.GetNetCapabilities();
        })
        .width('80%')
        .height(BUTTON_HEIGHT)
        .margin({ top: MARGIN.SMALL })
        .backgroundColor(Color.Blue)
        .fontColor(Color.White)
        .fontSize(FONT_SIZE.SMALL)
        .borderRadius(BORDER_RADIUS)
        .id('get-net-capabilities-btn')

      Button($r('app.string.GetDefaultHttpProxy'))
        .onClick(() => {
          this.GetDefaultHttpProxy();
        })
        .width('80%')
        .height(BUTTON_HEIGHT)
        .margin({ top: MARGIN.SMALL })
        .backgroundColor(Color.Orange)
        .fontColor(Color.White)
        .fontSize(FONT_SIZE.SMALL)
        .borderRadius(BORDER_RADIUS)
        .id('get-default-http-proxy-btn')

      Button($r('app.string.GetAddrInfo'))
        .onClick(() => {
          this.GetAddrInfo();
        })
        .width('80%')
        .height(BUTTON_HEIGHT)
        .margin({ top: MARGIN.SMALL })
        .backgroundColor(Color.Black)
        .fontColor(Color.White)
        .fontSize(FONT_SIZE.SMALL)
        .borderRadius(BORDER_RADIUS)
        .id('get-addr-info-btn')

      Button($r('app.string.GetAllNets'))
        .onClick(() => {
          this.GetAllNets();
        })
        .width('80%')
        .height(BUTTON_HEIGHT)
        .margin({ top: MARGIN.SMALL })
        .backgroundColor(Color.Red)
        .fontColor(Color.White)
        .fontSize(FONT_SIZE.SMALL)
        .borderRadius(BORDER_RADIUS)
        .id('get-all-nets-btn')

      Button($r('app.string.RegisterDnsResolver'))
        .onClick(() => {
          this.RegisterDnsResolver();
        })
        .width('80%')
        .height(BUTTON_HEIGHT)
        .margin({ top: MARGIN.SMALL })
        .backgroundColor(Color.Blue)
        .fontColor(Color.White)
        .fontSize(FONT_SIZE.SMALL)
        .borderRadius(BORDER_RADIUS)
        .id('register-dns-resolver-btn')

      Button($r('app.string.UnregisterDnsResolver'))
        .onClick(() => {
          this.UnregisterDnsResolver();
        })
        .width('80%')
        .height(BUTTON_HEIGHT)
        .margin({ top: MARGIN.SMALL })
        .backgroundColor(Color.Blue)
        .fontColor(Color.White)
        .fontSize(FONT_SIZE.SMALL)
        .borderRadius(BORDER_RADIUS)
        .id('unregister-dns-resolver-btn')
    // [EndExclude build_project5]
    }.width('100%').height('100%').justifyContent(FlexAlign.Center);
  }
  
  GetDefaultNet() {
    // [StartExclude build_project5]
    try {
      this.logMessage = `The defaultNetId is [${netId}]`;
      // [EndExclude build_project5]
      let netId = testNetManager.NetId();
      hilog.info(0x0000, 'testTag', 'The defaultNetId is [' + netid + ']');
      // [StartExclude build_project5]
      hilog.info(0x0000, 'testTag', this.logMessage);
    } catch (error) {
      this.logMessage = `Error fetching defaultNetId: ${error}`;
      hilog.error(0x0000, 'testTag', this.logMessage);
    }
    // [EndExclude build_project5]
  }

  CodeNumber() {
    let testParam = 1;
    // [StartExclude build_project5]
    try {
      // [EndExclude build_project5]
      let codeNumber = testNetManager.GetDefaultNet(testParam);
      switch (codeNumber) {
        case ReturnCode.SUCCESS:
          hilog.info(0x0000, 'testTag', 'Test success. [' + codeNumber + ']');
          // [StartExclude build_project5]
          this.logMessage = `Test success. [${codeNumber}]`;
          hilog.info(0x0000, 'testTag', this.logMessage);
          // [EndExclude build_project5]
          break;
        case ReturnCode.MISSING_PERMISSION:
          hilog.info(0x0000, 'testTag', 'Missing permissions. [' + codeNumber + ']');
          // [StartExclude build_project5]
          this.logMessage = `Missing permissions. [${codeNumber}]`;
          // [EndExclude build_project5]
          break;
        case ReturnCode.PARAMETER_ERROR:
          hilog.info(0x0000, 'testTag', 'Parameter error. [' + codeNumber + ']');
          // [StartExclude build_project5]
          this.logMessage = `Parameter error. [${codeNumber}]`;
          // [EndExclude build_project5]
          break;
        default:
          hilog.info(0x0000, 'testTag', 'Unexpected result: [' + codeNumber + ']');
          // [StartExclude build_project5]
          this.logMessage = `Unexpected result: [${codeNumber}]`;
          // [EndExclude build_project5]
          break;
      }
    // [StartExclude build_project5] 
    } catch (error) {
      this.logMessage = `Error fetching CodeNumber: ${error}`;
      hilog.error(0x0000, 'testTag', this.logMessage);
    }
    // [EndExclude build_project5]
  }
  // [End build_project5]

  GetHasDefaultNet() {
    let hasDefaultNet = testNetManager.HasDefaultNet(); // 调用 C++ 部分的接口
    if (hasDefaultNet === 1) {
      this.logMessage = 'The default network is activated.';
      hilog.info(0x0000, 'testTag', this.logMessage);
    } else if (hasDefaultNet === 0) {
      this.logMessage = 'No default network activated.';
      hilog.info(0x0000, 'testTag', this.logMessage);
    } else { // 处理错误码
      this.logMessage = `Error: [${hasDefaultNet}]`;
      hilog.error(0x0000, 'testTag', this.logMessage);
    }
  }

  GetIsDefaultNetMetered() {
    let isMetered = testNetManager.IsDefaultNetMetered(); // 调用 C++ 部分的接口
    if (isMetered === 1) {
      this.logMessage = 'The default network data usage is metered.';
      hilog.info(0x0000, 'testTag', this.logMessage);
    } else if (isMetered === 0) {
      this.logMessage = 'The default network data usage is not metered.';
      hilog.info(0x0000, 'testTag', this.logMessage);
    } else { // 处理错误码
      this.logMessage = `Error: [${isMetered}]`;
      hilog.error(0x0000, 'testTag', this.logMessage);
    }
  }

  GetConnectionProperties() {
    let netId = testNetManager.NetId();
    let result = testNetManager.GetConnectionProperties(netId); // 调用 C++ 端的接口
    if (result === 0) {
      this.logMessage = `Successfully fetched connection properties for network ID: ${netId}`;
      hilog.info(0x0000, 'testTag', this.logMessage);
    } else {
      this.logMessage = `Error fetching connection properties. Error code: ${result}`;
      hilog.error(0x0000, 'testTag', this.logMessage);
    }
  }

  GetNetCapabilities() {
    let netId = testNetManager.NetId();
    let result = testNetManager.GetNetCapabilities(netId); // 调用 C++ 端的接口
    if (result === 0) {
      this.logMessage = `Successfully fetched network capabilities for network ID: ${netId}`;
      hilog.info(0x0000, 'testTag', this.logMessage);
    } else {
      this.logMessage = `Error fetching network capabilities. Error code: ${result}`;
      hilog.error(0x0000, 'testTag', this.logMessage);
    }
  }

  GetDefaultHttpProxy() {
    let result = testNetManager.GetDefaultHttpProxy(); // 调用 C++ 部分的接口
    if (result === 0) {
      this.logMessage = `Successfully fetched the default HTTP proxy configuration.`;
      hilog.info(0x0000, 'testTag', this.logMessage);
    } else {
      this.logMessage = `Error fetching default HTTP proxy. Error code: ${result}`;
      hilog.error(0x0000, 'testTag', this.logMessage);
    }
  }

  GetAddrInfo() {
    let host = 'example.com';
    let serv = 'http'; // Or any service you want to query (like '80', '443', etc.)
    let netId = 0; // Use 0 for the default network

    let result = testNetManager.GetAddrInfo(host, serv, netId); // 调用 C++ 部分的接口
    if (result === 0) {
      this.logMessage = `Successfully fetched DNS information for host: ${host}, service: ${serv}`;
      hilog.info(0x0000, 'testTag', this.logMessage);
    } else {
      this.logMessage = `Error fetching DNS info. Error code: ${result}`;
      hilog.error(0x0000, 'testTag', this.logMessage);
    }
  }

  GetAllNets() {
    let result = testNetManager.GetAllNets(); // 调用 C++ 部分的接口
    if (result === 0) {
      this.logMessage = 'Successfully fetched all active network handles.';
      hilog.info(0x0000, 'testTag', this.logMessage);
    } else {
      this.logMessage = `Error fetching active network handles. Error code: ${result}`;
      hilog.error(0x0000, 'testTag', this.logMessage);
    }
  }

  RegisterDnsResolver() {
    let result = testNetManager.RegisterDnsResolver(); // 调用 C++ 端的接口
    if (result === 0) {
      this.logMessage = 'Successfully registered custom DNS resolver.';
      hilog.info(0x0000, 'testTag', this.logMessage);
    } else {
      this.logMessage = `Error registering DNS resolver. Error code: ${result}`;
      hilog.error(0x0000, 'testTag', this.logMessage);
    }
  }

  UnregisterDnsResolver() {
    let result = testNetManager.UnregisterDnsResolver(); // 调用 C++ 端的接口
    if (result === 0) {
      this.logMessage = 'Successfully unregistered custom DNS resolver.';
      hilog.info(0x0000, 'testTag', this.logMessage);
    } else {
      this.logMessage = `Error unregistering DNS resolver. Error code: ${result}`;
      hilog.error(0x0000, 'testTag', this.logMessage);
    }
  }
}
