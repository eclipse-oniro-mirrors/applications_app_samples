/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//[Start SpringLoading_start]
import { dragController } from '@kit.ArkUI';
import { unifiedDataChannel, uniformTypeDescriptor } from '@kit.ArkData';
export const SpringLoadingRoutePrefix: string= 'springLoadingExample';

@Entry
@ComponentV2
export struct SpringLoadingPage {
  context1 = this.getUIContext().getHostContext()
  @Local isShowSheet: boolean = false;
  private searchResult: string = this.context1?.resourceManager.getStringSync($r('app.string.Select_Result').id)!;
  @Local isSearchDone: boolean = false;
  private  reminderColor: Color = Color.Green;
  private normalColor: Color = Color.Blue;
  @Local buttonBackgroundColor: Color = this.normalColor;

  @Builder
  SheetBuilder() {
    Column() {
      // 输入框
      TextInput({placeholder: $r('app.string.Push_Here')})
        .width('80%').borderWidth(1).borderColor(Color.Black).padding({bottom: 5})
        .onChange((value: string)=>{
          if (value.length == 0) {
            this.isSearchDone = false;
            return;
          }
          // 此处简化处理，直接显示固定搜索结果
          this.isSearchDone = true;
        })
      if (this.isSearchDone) {
        Text(this.searchResult).fontSize(20).textAlign(TextAlign.Start).width('80%')
      }
    }.width('100%').height('100%')
  }

  // 检查拖拽数据类型是否包含所希望的plain-text
  checkDataType(dataSummary: unifiedDataChannel.Summary | undefined): boolean {
    let summary = dataSummary?.summary;
    if (summary == undefined) {
      return false;
    }

    let dataSummaryObjStr: string = JSON.stringify(summary);
    let dataSummaryArray: Array<Array<string>> = JSON.parse(dataSummaryObjStr);
    let isDataTypeMatched: boolean = false;
    dataSummaryArray.forEach((record: Array<string>) => {
      if (record[0] == 'general.plain-text') {
        isDataTypeMatched = true;
      }
    });
    return isDataTypeMatched;
  }

  // 处理BEGIN状态
  handleBeginState(context: SpringLoadingContext): boolean {
    // 检查用户所拖拽的数据类型是否自己能够处理的
    if (this.checkDataType(context?.dragInfos?.dataSummary)) {
      return true;
    }
    // 如果数据无法处理，直接终止Spring Loading
    context.abort();
    return false;
  }

  // Spring Loading处理入口
  handleSpringLoading(context: SpringLoadingContext) {
    // BEGIN 状态时检查拖拽数据类型
    if (context.state == dragController.DragSpringLoadingState.BEGIN) {
      if (this.handleBeginState(context)) {
        // 我们已经在onDragEnter时刷新了提醒色，进入Spring Loading状态时，恢复UI，提醒用户继续保持不动
        this.buttonBackgroundColor = this.normalColor;
      }
      return;
    }
    if (context.state == dragController.DragSpringLoadingState.UPDATE) {
      // 奇数次UPDATE通知刷新提醒UI，偶数次复原UI
      if (context.currentNotifySequence % 2 != 0) {
        this.buttonBackgroundColor = this.reminderColor;
      } else {
        this.buttonBackgroundColor = this.normalColor;
      }
      return;
    }
    // 处理Spring Loading结束，触发视图切换
    if (context.state == dragController.DragSpringLoadingState.END) {
      this.isShowSheet = true;
      return;
    }
    // 处理CANCEL状态，复原UI
    if (context.state == dragController.DragSpringLoadingState.CANCEL) {
      this.buttonBackgroundColor = this.normalColor;
      return;
    }
  }

  build() {
    Column() {
      NavDestination(){
        Column() {
          Text($r('app.string.DoubleClick_Text'))
            .fontSize(30)
            .copyOption(CopyOptions.InApp) // 开启copyOption之后，文本组件即可支持选择内容进行拖拽
        }.padding({bottom:30})

        Button($r('app.string.Search_Device')).width('80%').height('80vp').fontSize(30)
          .bindSheet($$this.isShowSheet, this.SheetBuilder(), {
            detents: [SheetSize.MEDIUM, SheetSize.LARGE, 600],
            preferType: SheetType.BOTTOM,
            title: { title: $r('app.string.Search_Device') },
          })
          .allowDrop([uniformTypeDescriptor.UniformDataType.PLAIN_TEXT])
          .backgroundColor(this.buttonBackgroundColor)
          .onDragEnter(()=>{
            // 当用户拖拽进入按钮范围，即提醒用户，此处是可以处理数据的
            this.buttonBackgroundColor = this.reminderColor
          })
          .onDragLeave(()=>{
            // 当用户拖拽离开按钮范围，恢复UI
            this.buttonBackgroundColor = this.normalColor
          })
          .onDragSpringLoading((context: SpringLoadingContext)=>{
            this.handleSpringLoading(context);
          })
      }
      .backgroundColor('#f1f3f5')
      .title('', {
        backgroundBlurStyle: BlurStyle.COMPONENT_THICK,
        barStyle: BarStyle.STACK
      })
      .title($r('app.string.Pages_Index_DropAnimation'))
    }.width('100%').height('100%')
    .justifyContent(FlexAlign.Center)
  }
}
//[End SpringLoading_start]