/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// [Start listen_response_key_event]
@Entry
@Component
export struct OnKey {
  @State buttonText: string = '';
  @State buttonType: string = '';
  @State columnText: string = '';
  @State columnType: string = '';

  build() {
    // [StartExclude listen_response_key_event]
    NavDestination() {
      Column({ space: 12 }) {
        // [EndExclude listen_response_key_event]
        Column() {
          Button('onKeyEvent')
            .defaultFocus(true)
            .width(140).height(70)
            .onKeyEvent((event?: KeyEvent) => { // 给Button设置onKeyEvent事件
              if(event){
                if (event.type === KeyType.Down) {
                  this.buttonType = 'Down';
                }
                if (event.type === KeyType.Up) {
                  this.buttonType = 'Up';
                }
                this.buttonText = 'Button: \n' +
                  'KeyType:' + this.buttonType + '\n' +
                  'KeyCode:' + event.keyCode + '\n' +
                  'KeyText:' + event.keyText;
              }
            })

          Divider()
          Text(this.buttonText).fontColor(Color.Green)

          Divider()
          Text(this.columnText).fontColor(Color.Red)
        }.width('100%').height('100%').justifyContent(FlexAlign.Center)
        .onKeyEvent((event?: KeyEvent) => { // 给父组件Column设置onKeyEvent事件
          if(event){
            if (event.type === KeyType.Down) {
              this.columnType = 'Down';
            }
            if (event.type === KeyType.Up) {
              this.columnType = 'Up';
            }
            this.columnText = 'Column: \n' +
              'KeyType:' + this.buttonType + '\n' +
              'KeyCode:' + event.keyCode + '\n' +
              'KeyText:' + event.keyText;
          }
        })
        // [StartExclude listen_response_key_event]
      }
      .width('100%')
      .height('100%')
      .padding({ left: 12, right: 12 })
    }
    .backgroundColor('#f1f2f3')
    .title($r('app.string.Device_OnKey_title'))
    // [EndExclude listen_response_key_event]
  }
}
// [End listen_response_key_event]