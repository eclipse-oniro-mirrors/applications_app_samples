{
  "string": [
    {
      "name": "module_desc",
      "value": "module description"
    },
    {
      "name": "EntryAbility_desc",
      "value": "description"
    },
    {
      "name": "EntryAbility_label",
      "value": "DialogProject"
    },
    {
      "name": "CustomDialog_dialog",
      "value": "自定义弹窗"
    },
    {
      "name": "CustomDialog_create",
      "value": "创建自定义弹框"
    },
    {
      "name": "CustomDialog_Animation",
      "value": "弹窗渐出动画预览"
    },
    {
      "name": "CustomDialog_Animation1",
      "value": "弹出框动画"
    },
    {
      "name": "CustomDialog_interaction",
      "value": "弹出框交互"
    },
    {
      "name": "CustomDialog_interaction1",
      "value": "弹出框交互页面跳转"
    },
    {
      "name": "CustomDialog_shadow",
      "value": "弹窗设置边框阴影预览"
    },
    {
      "name": "CustomDialog_style",
      "value": "弹出框的样式"
    },
    {
      "name": "CustomDialog_nest",
      "value": "嵌套自定义弹出框"
    },
    {
      "name": "CustomDialog_focus",
      "value": "弹出框焦点策略"
    },
    {
      "name": "CustomDialog_controller",
      "value": "弹出框控制器"
    },
    {
      "name": "CustomDialog_page_level",
      "value": "页面级弹出框"
    },
    {
      "name": "CustomDialog_box_layer",
      "value": "弹出框层级管理"
    },
    {
      "name": "CustomDialog_create_des",
      "value": "使用@CustomDialog装饰器装饰自定义弹出框，可在此装饰器内自定义弹出框内容。CustomDialogController需在@Component内定义。"
    },
    {
      "name": "CustomDialog_create_title",
      "value": "创建自定义弹出框"
    },
    {
      "name": "CustomDialog_interaction_des",
      "value": "弹出框可用于数据交互，完成用户一系列响应操作。"
    },
    {
      "name": "CustomDialog_interaction_title",
      "value": "弹出框的交互"
    },
    {
      "name": "CustomDialog_interaction1_des",
      "value": "可通过弹出框中的按钮实现路由跳转，同时获取跳转页面向当前页传入的参数。"
    },
    {
      "name": "CustomDialog_interaction1_title",
      "value": "弹出框的交互页面跳转"
    },
    {
      "name": "CustomDialog_animation_des",
      "value": "弹出框通过定义openAnimation控制弹出框出现动画的持续时间，速度等参数。"
    },
    {
      "name": "CustomDialog_animation_title",
      "value": "弹出框的动画"
    },
    {
      "name": "CustomDialog_Style_des",
      "value": "弹出框通过定义宽度、高度、背景色、阴影等参数来控制样式。"
    },
    {
      "name": "CustomDialog_Style_title",
      "value": "弹出框的样式"
    },
    {
      "name": "CustomDialog_nest_des",
      "value": "弹出框通过定义宽度、高度、背景色、阴影等参数来控制样式。"
    },
    {
      "name": "CustomDialog_focus_des",
      "value": "通过设置focusable参数来管理弹出框是否获取焦点。"
    },
    {
      "name": "CustomDialog_controller_des",
      "value": "可以将控制器传入弹出框内容区域后进行操作。"
    },
    {
      "name": "CustomDialog_layer_des",
      "value": "创建不同层级的弹出框。"
    },
    {
      "name": "CustomDialog_page_level_des",
      "value": "在路由跳转后，弹出框能够随前一个路由页面的切换而消失，并在路由返回后弹出框能够继续正常显示。"
    },
    {
      "name": "CustomDialog_nest_title",
      "value": "弹出框的样式"
    },
    {
      "name": "CustomDialog_ActionSheet",
      "value": "列表选择弹窗"
    },
    {
      "name": "CustomDialog_AlertDialog",
      "value": "警告弹窗"
    },
    {
      "name": "CustomDialog_calender",
      "value": "日历选择器弹窗"
    },
    {
      "name": "CustomDialog_date",
      "value": "日期滑动选择器弹窗"
    },
    {
      "name": "CustomCustomDialog_date",
      "value": "日期滑动选择器自定义弹窗"
    },
    {
      "name": "CustomDialog_text",
      "value": "文本滑动选择器弹窗"
    },
    {
      "name": "CustomDialog_time",
      "value": "时间滑动选择器弹窗"
    },
    {
      "name": "CalendarPickerDialog_title",
      "value": "日历选择器弹窗"
    },
    {
      "name": "CalendarPickerDialog_des",
      "value": "日历选择器弹窗提供日历视图，包含年、月和星期信息，通过CalendarPickerDialog接口实现。开发者可调用show函数，定义并弹出日历选择器弹窗。"
    },
    {
      "name": "DatePicker_title",
      "value": "日期滑动选择器弹窗"
    },
    {
      "name": "DatePicker_des",
      "value": "开发者可以利用指定的日期范围，创建日期滑动选择器弹窗，将日期信息清晰地展示在弹出的窗口上。"
    },
    {
      "name": "DatePickerCustom_title",
      "value": "日期滑动选择器自定义弹窗"
    },
    {
      "name": "DatePickerCustom_des",
      "value": "开发者可以利用指定的日期范围，创建日期滑动选择器自定义弹窗，将日期信息清晰地展示在弹出的窗口上。"
    },
    {
      "name": "TimePicker_title",
      "value": "时间滑动选择器弹窗"
    },
    {
      "name": "TimePicker_des",
      "value": "开发者可根据24小时的时间区间，创建时间滑动选择器弹窗，将时间信息清晰地展示在弹出的窗口上。"
    },
    {
      "name": "TextPicker_title",
      "value": "文本滑动选择器弹窗"
    },
    {
      "name": "TextPicker_des",
      "value": "开发者可根据指定的选择范围，创建文本滑动选择器弹窗，将文本信息清晰地展示在弹出的窗口上。"
    },
    {
      "name": "ActionSheet_title",
      "value": "列表选择弹窗"
    },
    {
      "name": "ActionSheet_des",
      "value": "列表选择器弹窗适用于呈现多个操作选项，尤其当界面中仅需展示操作列表而无其他内容时。"
    },
    {
      "name": "AlertDialog_title",
      "value": "警告弹窗"
    },
    {
      "name": "AlertDialog_des",
      "value": "需要向用户提问或得到用户的许可时，可使用警告弹窗。"
    },
    {
      "name": "fixed_dialog",
      "value": "固定样式弹出框"
    },
    {
      "name": "menu_single",
      "value": "菜单选项单级"
    },
    {
      "name": "menu_forbid",
      "value": "菜单不可选择"
    },
    {
      "name": "menu_more",
      "value": "菜单选项多级"
    },
    {
      "name": "menu_subtitle",
      "value": "小标题"
    },
    {
      "name": "menu_selection",
      "value": "菜单选项"
    },
    {
      "name": "menu_default",
      "value": "默认样式"
    },
    {
      "name": "menu_bind",
      "value": "属性绑定"
    },
    {
      "name": "menu_rightClick",
      "value": "支持鼠标右键的菜单"
    },
    {
      "name": "create_menu",
      "value": "创建菜单"
    },
    {
      "name": "menu",
      "value": "菜单"
    },
    {
      "name": "CreateMenu_title",
      "value": "创建自定义样式的菜单"
    },
    {
      "name": "OpenMenu_title",
      "value": "不依赖UI组件的全局气泡提示"
    },
    {
      "name": "CreateMenu_des",
      "value": "菜单需要调用bindMenu接口来实现。bindMenu响应绑定组件的点击事件，绑定组件后手势点击对应组件后即可弹出。"
    },
    {
      "name": "OpenMenu_des",
      "value": "通过使用全局接口openPopup的方式，在无UI组件的场景下直接或封装使用。"
    },
    {
      "name": "Customdialog_title",
      "value": "不依赖UI组件的全局自定义弹出框"
    },
    {
      "name": "Customdialog_des",
      "value": "由于CustomDialogController在使用上存在诸多限制，不支持动态创建也不支持动态刷新，在相对较复杂的应用场景中推荐使用UIContext中获取到的PromptAction对象提供的openCustomDialog接口来实现自定义弹出框。"
    },
    {
      "name": "OverlayManager_demo1_title",
      "value": "设置浮层"
    },
    {
      "name": "OverlayManager_demo1_des",
      "value": "在OverlayManager上新增指定节点（addComponentContent）、删除指定节点（removeComponentContent）、显示所有节点（showAllComponentContents）和隐藏所有节点（hideAllComponentContents）"
    },
    {
      "name": "OverlayManager_demo1_button1",
      "value": "递增componentContentIndex: "
    },
    {
      "name": "OverlayManager_demo1_button2",
      "value": "递减componentContentIndex: "
    },
    {
      "name": "OverlayManager_demo1_button3",
      "value": "增加ComponentContent"
    },
    {
      "name": "OverlayManager_demo1_button4",
      "value": "递增arrayIndex: "
    },
    {
      "name": "OverlayManager_demo1_button5",
      "value": "递减arrayIndex: "
    },
    {
      "name": "OverlayManager_demo1_button6",
      "value": "删除ComponentContent"
    },
    {
      "name": "OverlayManager_demo1_button7",
      "value": "显示ComponentContent"
    },
    {
      "name": "OverlayManager_demo1_button8",
      "value": "隐藏ComponentContent"
    },
    {
      "name": "OverlayManager_demo1_button9",
      "value": "显示所有ComponentContent"
    },
    {
      "name": "OverlayManager_demo1_button10",
      "value": "隐藏所有ComponentContent"
    },
    {
      "name": "OverlayManager_demo1_button11",
      "value": "跳转页面"
    },
    {
      "name": "OverlayManager_demo2_title",
      "value": "弹出alertDialog弹窗"
    },
    {
      "name": "OverlayManager_demo2_des",
      "value": "显示一个始终在屏幕左侧的悬浮球，点击可以弹出alertDialog弹窗。"
    },
    {
      "name": "OverlayManager_demo3_title",
      "value": "新增指定节点addComponentContentWithOrder"
    },
    {
      "name": "OverlayManager_demo3_des",
      "value": "从API version 18开始，可以通过调用UIContext中getOverlayManager方法获取OverlayManager对象，并利用该对象在指定层级上新增指定节点（addComponentContentWithOrder），层次高的浮层会覆盖在层级低的浮层之上。"
    },
    {
      "name": "Demo3_topDialogButton",
      "value": "点击打开置顶弹窗"
    },
    {
      "name": "Demo3_topDialog",
      "value": "我是置顶弹窗"
    },
    {
      "name": "Demo3_normalDialogButton",
      "value": "点击打开普通弹窗"
    },
    {
      "name": "Demo3_normalDialog",
      "value": "我是普通弹窗"
    },
    {
      "name": "Demo3_removeDialogButton",
      "value": "点击移除弹窗"
    },
    {
      "name": "close_dialog",
      "value": "关闭弹窗"
    },
    {
      "name": "change_dialog",
      "value": "改变弹窗位置"
    },
    {
      "name": "change_text",
      "value": "该按钮呼出的弹窗，点击“改变弹窗位置”弹窗由上对齐更新为底部对齐"
    },
    {
      "name": "open_customDialog",
      "value": "不依赖UI组件的全局自定义弹出框"
    },
    {
      "name": "button_popup",
      "value": "带按钮的提示气泡"
    },
    {
      "name": "custom_popup",
      "value": "自定义气泡"
    },
    {
      "name": "popup",
      "value": "气泡提示"
    },
    {
      "name": "TextPopup_title",
      "value": "文本提示气泡"
    },
    {
      "name": "TextPopup_des",
      "value": "文本提示气泡常用于只展示带有文本的信息提示，不带有任何交互的场景。Popup属性需绑定组件，当bindPopup属性中参数show为true时会弹出气泡提示。"
    },
    {
      "name": "onStateChange_title",
      "value": "添加气泡状态变化的事件"
    },
    {
      "name": "onStateChange_des",
      "value": "通过onStateChange参数为气泡添加状态变化的事件回调，可以判断当前气泡的显示状态。"
    },
    {
      "name": "ButtonPopup_title",
      "value": "带按钮的提示气泡"
    },
    {
      "name": "ButtonPopup_des",
      "value": "通过primaryButton、secondaryButton属性为气泡最多设置两个Button按钮，通过此按钮进行简单的交互，开发者可以通过配置action参数来设置想要触发的操作。"
    },
    {
      "name": "AnimationPopup_title",
      "value": "气泡的动画"
    },
    {
      "name": "AnimationPopup_des",
      "value": "气泡通过定义transition控制气泡的进场和出场动画效果。"
    },
    {
      "name": "CustomPopup_title",
      "value": "自定义气泡"
    },
    {
      "name": "CustomPopup_des",
      "value": "开发者可以使用CustomPopupOptions的builder创建自定义气泡，@Builder中可以放自定义的内容。除此之外，还可以通过popupColor等参数控制气泡样式。"
    },
    {
      "name": "StylePopup_title",
      "value": "气泡样式"
    },
    {
      "name": "StylePopup_global",
      "value": "全局气泡提示"
    },
    {
      "name": "StylePopup_des",
      "value": "气泡除了可以通过builder实现自定义气泡，还可以通过接口设置气泡的样式和显示效果。"
    },
    {
      "name": "AvoidSoftKeyboardPopupExample_title",
      "value": "气泡避让软键盘"
    },
    {
      "name": "AvoidSoftKeyboardPopupExample_des",
      "value": "当软键盘弹出时，气泡默认不会对其避让，可能导致气泡被软键盘覆盖，这时需要设置keyboardAvoidMode为KeyboardAvoidMode.DEFAULT，来使气泡避让键盘。这时如果当前没有位置放下气泡时，气泡会从预设位置平移覆盖宿主组件。"
    },
    {
      "name": "PolymorphicEffectPopupExample_title",
      "value": "设置气泡内的多态效果"
    },
    {
      "name": "PolymorphicEffectPopupExample_des",
      "value": "目前使用@Builder自定义气泡内容时，默认不支持多态样式，可以使用@Component新建一个组件实现按下气泡中的内容时背景变色。"
    },
    {
      "name": "SupportedAvoidAxisPopupExample_title",
      "value": "气泡支持避让中轴"
    },
    {
      "name": "SupportedAvoidAxisPopupExample_des",
      "value": "从API version 18起，气泡支持中轴避让功能。从API version 20开始，在2in1设备上默认启用（仅在窗口处于瀑布模式时产生避让）。开发者可通过PopupOptions中的enableHoverMode属性，控制气泡是否启用中轴避让。"
    },
    {
      "name": "StylePopup_global_des",
      "value": "通过使用全局接口openPopup的方式，在无UI组件的场景下直接或封装使用。"
    },
    {
      "name": "toast",
      "value": "即时反馈"
    },
    {
      "name": "CreateToast_title",
      "value": "创建即时反馈"
    },
    {
      "name": "CreateToast_des",
      "value": "适用于短时间内提示框自动消失的场景。"
    },
    {
      "name": "OpenCloseToast_title",
      "value": "显示关闭即时反馈"
    },
    {
      "name": "OpenCloseToast_des",
      "value": "适用于提示框提留时间较长，用户操作可以提前关闭提示框的场景。"
    },
    {
      "name": "openCustomDialog",
      "value": "自定义弹出框/openCustomDialog"
    },
    {
      "name": "CustomDialog1",
      "value": "基础自定义弹出框/CustomDialog"
    },
    {
      "name": "FixedStyleDialog1",
      "value": "固定样式弹出框/FixedStyleDialog"
    },
    {
      "name": "Menu1",
      "value": "菜单控制/Menu"
    },
    {
      "name": "Toast1",
      "value": "即时反馈/Toast"
    },
    {
      "name": "Popup1",
      "value": "气泡提示/Popup"
    },
    {
      "name": "OverlayManager1",
      "value": "设置浮层/OverlayManager"
    },
    {
      "name": "back",
      "value": "点击返回"
    },
    {
      "name": "ShowActionMenu_title",
      "value": "操作菜单"
    },
    {
      "name": "ShowActionMenu_des",
      "value": "操作菜单通过UIContext中的getPromptAction方法获取到PromptAction对象，再通过该对象调用showActionMenu接口实现，支持在回调或开发者自定义类中使用。"
    },
    {
      "name": "ShowDialog_title",
      "value": "对话框"
    },
    {
      "name": "ShowDialog_des",
      "value": "对话框通过UIContext中的getPromptAction方法获取到PromptAction对象，再通过该对象调用showDialog接口实现，支持在回调或开发者自定义类中使用。"
    },
    {
      "name": "DefaultAndTopToast_title",
      "value": "即时反馈模式对比"
    },
    {
      "name": "DefaultAndTopToast_des",
      "value": "即时反馈提供了两种显示模式，分别为DEFAULT（显示在应用内）、TOP_MOST（显示在应用之上）。"
    },
    {
      "name": "customDialogComponentWithTransition_title",
      "value": "为弹出框内容和蒙层设置不同的动画效果"
    },
    {
      "name": "customDialogComponentWithTransition_desc",
      "value": "当弹出框出现时，内容与蒙层显示动效一致。若开发者希望为弹出框内容及蒙层设定不同动画效果，从API version 19开始，可通过BaseDialogOptions中dialogTransition和maskTransition属性单独配置弹窗内容与蒙层的动画。具体的动画效果请参考组件内转场 (transition)。"
    },
    {
      "name": "customDialogWithKeyboardAvoidDistance_title",
      "value": "设置弹出框避让软键盘的距离"
    },
    {
      "name": "customDialogWithKeyboardAvoidDistance_desc",
      "value": "为显示弹出框的独立性，弹出框弹出时会与周边进行避让，包括状态栏、导航条以及键盘等留有间距。故当软键盘弹出时，默认情况下，弹出框会自动避开软键盘，并与之保持16vp的距离。从API version 15开始，开发者可以利用BaseDialogOptions中的keyboardAvoidMode和keyboardAvoidDistance这两个配置项，来设置弹出框在软键盘弹出时的行为，包括是否需要避开软键盘以及与软键盘之间的距离。"
    },
    {
      "name": "OpenDialogAndUpdate_title",
      "value": "完整示例"
    },
    {
      "name": "OpenDialogAndUpdate_desc",
      "value": "完整示例。"
    },
    {
      "name": "open_windows",
      "value": "打开弹窗"
    },
    {
      "name": "this_is_a_window",
      "value": "这是一个弹窗"
    },
    {
      "name": "Mask_CustomDialog_dialog",
      "value": "弹出框蒙层控制"
    },
    {
      "name": "MaskDialog",
      "value": "弹出框蒙层控制/MaskDialog"
    },
    {
      "name": "CustomDialogAnimation_title",
      "value": "openAnimation和closeAnimation接口"
    },
    {
      "name": "CustomDialogAnimation_desc",
      "value": "CustomDialog虽然不支持transition接口，但与之对应的openAnimation和closeAnimation接口在动画的打开和关闭时可进行定制。"
    },
    {
      "name": "CustomDialogControl_title",
      "value": "弹出框蒙层显隐控制"
    },
    {
      "name": "CustomDialogControl_desc",
      "value": "展示弹出框在蒙层显隐控制方面的能力。"
    },
    {
      "name": "DefaultAndTopToast_defaultToast",
      "value": "DEFAULT类型Toast"
    },
    {
      "name": "DefaultAndTopToast_defaultToastMessage",
      "value": "ok，我是DEFAULT toast"
    },
    {
      "name": "DefaultAndTopToast_topToast",
      "value": "TOPMOST类型Toast"
    },
    {
      "name": "DefaultAndTopToast_topToastMessage",
      "value": "ok，我是TOP_MOST toast"
    },
    {
      "name": "Scan_title",
      "value": "扫一扫"
    },
    {
      "name": "Create_group_chat",
      "value": "创建群聊"
    },
    {
      "name": "Electronic_work_card",
      "value": "电子工卡"
    },
    {
      "name": "Selected",
      "value": "选中了"
    },
    {
      "name": "Upper_half_screen",
      "value": "上半屏"
    },
    {
      "name": "Middle_axle",
      "value": "中轴"
    },
    {
      "name": "Lower_half_screen",
      "value": "下半屏"
    },
    {
      "name": "Subwindow_display",
      "value": "子窗显示"
    },
    {
      "name": "Subwindow",
      "value": "子窗"
    },
    {
      "name": "Non_Subwindow",
      "value": "非子窗"
    },
    {
      "name": "zone",
      "value": "区域"
    },
    {
      "name": "hoverMode_start",
      "value": "hoverMode开启"
    },
    {
      "name": "PopVibrateMenu_title",
      "value": "菜单弹出时振动效果"
    },
    {
      "name": "PopVibrateMenu_des",
      "value": "菜单弹出时，默认不振动。若希望菜单弹出时有振动效果，可以通过ContextMenuOptions的hapticFeedbackMode属性，设置菜单弹出时的振动模式。"
    },
    {
      "name": "Click_for_menu",
      "value": "click for Menu"
    },
    {
      "name": "SupportAvoidCentralAxisMenu_title",
      "value": "菜单支持避让中轴"
    },
    {
      "name": "SupportAvoidCentralAxisMenu_des",
      "value": "从API version 18起，菜单支持中轴避让功能。从API version 20开始，在2in1设备上默认启用（仅在窗口处于瀑布模式时产生避让）。开发者可通过ContextMenuOptions中的enableHoverMode属性，控制菜单是否启用中轴避让。"
    },
    {
      "name": "EventTransSubWindowMenu_title",
      "value": "控制子窗菜单的事件透传"
    },
    {
      "name": "EventTransSubWindowMenu_des",
      "value": "当菜单在子窗口中弹出时，默认情况下，菜单周围的事件会传递至所在窗口。从API version 20开始，开发者可通过ContextMenuOptions的modalMode属性设置子菜单弹出时的模态模式，以控制菜单周围事件是否传递。将modalMode设置为ModalMode.TARGET_WINDOW时，菜单周围的事件将不再传递，菜单下方的控件也不会响应事件。"
    },
    {
      "name": "BindComponentMenu_title",
      "value": "基于绑定组件指定位置弹出菜单"
    },
    {
      "name": "BindComponentMenu_des",
      "value": "菜单从API version 20开始支持基于绑定组件在指定位置弹出。通过设置水平与垂直偏移量，控制菜单相对于绑定组件左上角的弹出位置。与单独使用offset接口不同，此方法可使菜单覆盖显示在绑定组件上。需要指定弹出位置时，可使用ContextMenuOptions的anchorPosition属性进行设置。"
    },
    {
      "name": "closeDialog_by_id",
      "value": "点击关闭弹窗：通过DialogID"
    },
    {
      "name": "closeDialog_by_outside",
      "value": "点击关闭弹窗：通过外部传递的DialogController"
    },
    {
      "name": "closeDialog_by_custom",
      "value": "点我关闭弹窗：通过自定义组件自带的DialogController"
    },
    {
      "name": "closeDialog_by_controller",
      "value": "点我关闭弹窗：通过外部传递的DialogController"
    },
    {
      "name": "my_content",
      "value": "我是内容"
    },
    {
      "name": "closeDialog_by_dialog",
      "value": "点我关闭弹窗：通过自定义组件自带的DialogController"
    },
    {
      "name": "closeDialog_by_dialog_controller",
      "value": "点击关闭弹窗：通过外部传递的DialogController"
    }
  ]
}