// @ts-nocheck
/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium'
import { UiDriver, BY, UiComponent, MatchPattern } from '@ohos.uitest'
import featureAbility from '@ohos.ability.featureAbility'
import hilog from '@ohos.hilog'

const TAG = '[Sample_Component]'
const DOMAIN = 0xF811
const BUNDLE = 'Component_'

export default function appTest() {
  describe('appTest', function () {
    it(BUNDLE + 'StartAbility_001', 0, async function (done) {
      hilog.info(DOMAIN, TAG, BUNDLE + 'StartAbility_001 begin')
      let parameter = {
        "want": {
          bundleName: "ohos.samples.etscomponent",
          abilityName: "ohos.samples.etscomponent.MainAbility"
        }
      }
      await featureAbility.startAbility(parameter, (err, data) => {
        hilog.info(DOMAIN, TAG, BUNDLE + 'StartAbility_001,err.code:' + err.code)
        expect(0).assertEqual(err.code)
        done()
        hilog.info(DOMAIN, TAG, BUNDLE + 'StartAbility_001 end')
      })
    })

    /**
     * 基础组件
     */
    it(BUNDLE + 'BasicFunction_001', 0, async function () {
      hilog.info(DOMAIN, TAG, BUNDLE + 'BasicFunction_001 begin')
      let driver = await UiDriver.create()
      await driver.delayMs(2000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'BasicFunction_001 basicsClick')
      await driver.assertComponentExist(BY.text('基础组件', MatchPattern.CONTAINS))
      let btnBasics = await driver.findComponent(BY.text('基础组件', MatchPattern.CONTAINS))
      await btnBasics.click()
      hilog.info(DOMAIN, TAG, BUNDLE + 'BasicFunction_001 end')
    })

    /**
     * 基础组件-Button
     */
    it(BUNDLE + 'ButtonFunction_001', 0, async function () {
      hilog.info(DOMAIN, TAG, BUNDLE + 'ButtonFunction_001 begin')
      let driver = await UiDriver.create()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'ButtonFunction_001 clickButton')
      await driver.assertComponentExist(BY.text('Button', MatchPattern.CONTAINS))
      let btnButton = await driver.findComponent(BY.text('Button', MatchPattern.CONTAINS))
      await btnButton.click()
      await driver.delayMs(1000)
      // 包含子组件
      hilog.info(DOMAIN, TAG, BUNDLE + 'ButtonFunction_001 btnTextTrue')
      await driver.assertComponentExist(BY.key('btnTextTrue'))
      let btnTextTrue = await driver.findComponent(BY.key('btnTextTrue'))
      await btnTextTrue.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'ButtonFunction_001 btnTextFalse')
      await driver.assertComponentExist(BY.key('btnTextFalse'))
      let btnTextFalse = await driver.findComponent(BY.key('btnTextFalse'))
      await btnTextFalse.click()
      await driver.delayMs(1000)
      await driver.pressBack()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'ButtonFunction_001 end')
    })

    /**
     * 基础组件-Text
     */
    it(BUNDLE + 'TextFunction_001', 0, async function () {
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextFunction_001 begin')
      let driver = await UiDriver.create()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextFunction_001 clickText')
      await driver.assertComponentExist(BY.text('Text', MatchPattern.CONTAINS))
      let btnText = await driver.findComponent(BY.text('Text', MatchPattern.CONTAINS))
      await btnText.click()
      await driver.delayMs(1000)
      // maxLines
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextFunction_001 maxLinesSlider')
      await driver.assertComponentExist(BY.key('maxLinesSlider'))
      let maxLinesSlider = await driver.findComponent(BY.key('maxLinesSlider'))
      await maxLinesSlider.click()
      await driver.delayMs(1000)
      // lineHeight
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextFunction_001 lineHeightSlider')
      await driver.assertComponentExist(BY.key('lineHeightSlider'))
      let lineHeightSlider = await driver.findComponent(BY.key('lineHeightSlider'))
      await lineHeightSlider.click()
      await driver.delayMs(1000)
      // baselineOffset
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextFunction_001 baselineOffsetSlider')
      await driver.assertComponentExist(BY.key('baselineOffsetSlider'))
      let baselineOffsetSlider = await driver.findComponent(BY.key('baselineOffsetSlider'))
      await baselineOffsetSlider.click()
      await driver.delayMs(1000)
      // 多行文本对齐
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextFunction_001 startClick')
      await driver.assertComponentExist(BY.text('Start', MatchPattern.CONTAINS))
      let textAlignStart = await driver.findComponent(BY.text('Start', MatchPattern.CONTAINS))
      await textAlignStart.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextFunction_001 endClick')
      await driver.assertComponentExist(BY.text('End', MatchPattern.CONTAINS))
      let textAlignEnd = await driver.findComponent(BY.text('End', MatchPattern.CONTAINS))
      await textAlignEnd.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextFunction_001 centerClick')
      await driver.assertComponentExist(BY.text('Center', MatchPattern.CONTAINS))
      let textAlignCenter = await driver.findComponent(BY.text('Center', MatchPattern.CONTAINS))
      await textAlignCenter.click()
      await driver.delayMs(1000)
      // 超长文本显示方式
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextFunction_001 clip')
      await driver.assertComponentExist(BY.text('Clip', MatchPattern.CONTAINS))
      let textOverflowClip = await driver.findComponent(BY.text('Clip', MatchPattern.CONTAINS))
      await textOverflowClip.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextFunction_001 ellipsis')
      await driver.assertComponentExist(BY.text('Ellipsis', MatchPattern.CONTAINS))
      let textOverflowEllipsis = await driver.findComponent(BY.text('Ellipsis', MatchPattern.CONTAINS))
      await textOverflowEllipsis.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextFunction_001 none')
      await driver.assertComponentExist(BY.text('None', MatchPattern.CONTAINS))
      let textOverflowNone = await driver.findComponent(BY.text('None', MatchPattern.CONTAINS))
      await textOverflowNone.click()
      await driver.delayMs(1000)
      // 文本装饰线样式
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextFunction_001 underline')
      await driver.assertComponentExist(BY.text('Underline', MatchPattern.CONTAINS))
      let decorationUnderline = await driver.findComponent(BY.text('Underline', MatchPattern.CONTAINS))
      await decorationUnderline.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextFunction_001 lineThrough')
      await driver.assertComponentExist(BY.text('LineThrough', MatchPattern.CONTAINS))
      let decorationLineThrough = await driver.findComponent(BY.text('LineThrough', MatchPattern.CONTAINS))
      await decorationLineThrough.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextFunction_001 none')
      await driver.assertComponentExist(BY.text('None', MatchPattern.CONTAINS))
      let decorationNone = await driver.findComponent(BY.text('None', MatchPattern.CONTAINS))
      await decorationNone.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextFunction_001 overLine')
      await driver.assertComponentExist(BY.text('Overline', MatchPattern.CONTAINS))
      let decorationOverline = await driver.findComponent(BY.text('Overline', MatchPattern.CONTAINS))
      await decorationOverline.click()
      await driver.delayMs(1000)
      await driver.pressBack()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextFunction_001 end')
    })

    /**
     * 基础组件-Span
     */
    it(BUNDLE + 'SpanFunction_001', 0, async function () {
      hilog.info(DOMAIN, TAG, BUNDLE + 'SpanFunction_001 begin')
      let driver = await UiDriver.create()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'SpanFunction_001 clickSpan')
      await driver.assertComponentExist(BY.text('Span', MatchPattern.CONTAINS))
      let btnSpan = await driver.findComponent(BY.text('Span', MatchPattern.CONTAINS))
      await btnSpan.click()
      await driver.delayMs(1000)
      // 文本装饰线样式
      hilog.info(DOMAIN, TAG, BUNDLE + 'SpanFunction_001 underLine')
      await driver.assertComponentExist(BY.text('Underline', MatchPattern.CONTAINS))
      let decorationUnderline = await driver.findComponent(BY.text('Underline', MatchPattern.CONTAINS))
      await decorationUnderline.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'SpanFunction_001 lineThrough')
      await driver.assertComponentExist(BY.text('LineThrough', MatchPattern.CONTAINS))
      let decorationLineThrough = await driver.findComponent(BY.text('LineThrough', MatchPattern.CONTAINS))
      await decorationLineThrough.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'SpanFunction_001 none')
      await driver.assertComponentExist(BY.text('None', MatchPattern.CONTAINS))
      let decorationNone = await driver.findComponent(BY.text('None', MatchPattern.CONTAINS))
      await decorationNone.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'SpanFunction_001 overLine')
      await driver.assertComponentExist(BY.text('Overline', MatchPattern.CONTAINS))
      let decorationOverline = await driver.findComponent(BY.text('Overline', MatchPattern.CONTAINS))
      await decorationOverline.click()
      await driver.delayMs(1000)
      // 文本装饰线颜色
      hilog.info(DOMAIN, TAG, BUNDLE + 'SpanFunction_001 green')
      await driver.assertComponentExist(BY.text('Green', MatchPattern.CONTAINS))
      let colorGreen = await driver.findComponent(BY.text('Green', MatchPattern.CONTAINS))
      await colorGreen.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'SpanFunction_001 orange')
      await driver.assertComponentExist(BY.text('Orange', MatchPattern.CONTAINS))
      let colorOrange = await driver.findComponent(BY.text('Orange', MatchPattern.CONTAINS))
      await colorOrange.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'SpanFunction_001 pink')
      await driver.assertComponentExist(BY.text('Pink', MatchPattern.CONTAINS))
      let colorPink = await driver.findComponent(BY.text('Pink', MatchPattern.CONTAINS))
      await colorPink.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'SpanFunction_001 yellow')
      await driver.assertComponentExist(BY.text('Yellow', MatchPattern.CONTAINS))
      let colorYellow = await driver.findComponent(BY.text('Yellow', MatchPattern.CONTAINS))
      await colorYellow.click()
      await driver.delayMs(1000)
      // 文本大小写
      hilog.info(DOMAIN, TAG, BUNDLE + 'SpanFunction_001 normal')
      await driver.assertComponentExist(BY.text('Normal', MatchPattern.CONTAINS))
      let textCaseNormal = await driver.findComponent(BY.text('Normal', MatchPattern.CONTAINS))
      await textCaseNormal.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'SpanFunction_001 lowerCase')
      await driver.assertComponentExist(BY.text('LowerCase', MatchPattern.CONTAINS))
      let textCaseLowerCase = await driver.findComponent(BY.text('LowerCase', MatchPattern.CONTAINS))
      await textCaseLowerCase.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'SpanFunction_001 upperCase')
      await driver.assertComponentExist(BY.text('UpperCase', MatchPattern.CONTAINS))
      let textCaseUpperCase = await driver.findComponent(BY.text('UpperCase', MatchPattern.CONTAINS))
      await textCaseUpperCase.click()
      await driver.delayMs(1000)
      await driver.pressBack()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'SpanFunction_001 end')
    })

    /**
     * 基础组件-TextArea
     */
    it(BUNDLE + 'TextAreaFunction_001', 0, async function () {
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextAreaFunction_001 begin')
      let driver = await UiDriver.create()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextAreaFunction_001 clickTextArea')
      await driver.assertComponentExist(BY.text('TextArea', MatchPattern.CONTAINS))
      let btnTextArea = await driver.findComponent(BY.text('TextArea', MatchPattern.CONTAINS))
      await btnTextArea.click()
      await driver.delayMs(1000)
      // placeholder size
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextAreaFunction_001 placeholderSizeSlider')
      await driver.assertComponentExist(BY.key('placeholderSizeSlider'))
      let placeholderSizeSlider = await driver.findComponent(BY.key('placeholderSizeSlider'))
      await placeholderSizeSlider.click()
      await driver.delayMs(1000)
      // placeholder颜色
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextAreaFunction_001 green')
      await driver.assertComponentExist(BY.text('Green', MatchPattern.CONTAINS))
      let colorGreen = await driver.findComponent(BY.text('Green', MatchPattern.CONTAINS))
      await colorGreen.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextAreaFunction_001 orange')
      await driver.assertComponentExist(BY.text('Orange', MatchPattern.CONTAINS))
      let colorOrange = await driver.findComponent(BY.text('Orange', MatchPattern.CONTAINS))
      await colorOrange.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextAreaFunction_001 pink')
      await driver.assertComponentExist(BY.text('Pink', MatchPattern.CONTAINS))
      let colorPink = await driver.findComponent(BY.text('Pink', MatchPattern.CONTAINS))
      await colorPink.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextAreaFunction_001 yellow')
      await driver.assertComponentExist(BY.text('Yellow', MatchPattern.CONTAINS))
      let colorYellow = await driver.findComponent(BY.text('Yellow', MatchPattern.CONTAINS))
      await colorYellow.click()
      await driver.delayMs(1000)
      // 字体样式
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextAreaFunction_001 fontStyleNormal')
      await driver.assertComponentExist(BY.text('Normal', MatchPattern.CONTAINS))
      let fontStyleNormal = await driver.findComponent(BY.text('Normal', MatchPattern.CONTAINS))
      await fontStyleNormal.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextAreaFunction_001 fontStyleItalic')
      await driver.assertComponentExist(BY.text('Italic', MatchPattern.CONTAINS))
      let fontStyleItalic = await driver.findComponent(BY.text('Italic', MatchPattern.CONTAINS))
      await fontStyleItalic.click()
      await driver.delayMs(1000)
      // fontWeight
      // Number
      let scrollBar = await driver.findComponent(BY.type('Scroll'))
      await scrollBar.scrollToBottom()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextAreaFunction_001 fontWeightNumber')
      await driver.assertComponentExist(BY.text('Number', MatchPattern.CONTAINS))
      let fontWeightNumber = await driver.findComponent(BY.text('Number', MatchPattern.CONTAINS))
      await fontWeightNumber.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextAreaFunction_001 fontWeightSlider')
      await driver.assertComponentExist(BY.key('fontWeightSlider'))
      let fontWeightSlider = await driver.findComponent(BY.key('fontWeightSlider'))
      await fontWeightSlider.click()
      await driver.delayMs(1000)
      // String
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextAreaFunction_001 fontWeightString')
      await driver.assertComponentExist(BY.text('String', MatchPattern.CONTAINS))
      let fontWeightString = await driver.findComponent(BY.text('String', MatchPattern.CONTAINS))
      await fontWeightString.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextAreaFunction_001 bold')
      await driver.assertComponentExist(BY.text('Bold', MatchPattern.CONTAINS))
      let fontWeightBold = await driver.findComponent(BY.text('Bold', MatchPattern.CONTAINS))
      await fontWeightBold.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextAreaFunction_001 normal')
      await driver.assertComponentExist(BY.text('Normal', MatchPattern.CONTAINS))
      let fontWeightNormal = await driver.findComponent(BY.text('Normal', MatchPattern.CONTAINS))
      await fontWeightNormal.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextAreaFunction_001 bolder')
      await driver.assertComponentExist(BY.text('Bolder', MatchPattern.CONTAINS))
      let fontWeightBolder = await driver.findComponent(BY.text('Bolder', MatchPattern.CONTAINS))
      await fontWeightBolder.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextAreaFunction_001 lighter')
      await driver.assertComponentExist(BY.text('Lighter', MatchPattern.CONTAINS))
      let fontWeightLighter = await driver.findComponent(BY.text('Lighter', MatchPattern.CONTAINS))
      await fontWeightLighter.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextAreaFunction_001 medium')
      await driver.assertComponentExist(BY.text('Medium', MatchPattern.CONTAINS))
      let fontWeightMedium = await driver.findComponent(BY.text('Medium', MatchPattern.CONTAINS))
      await fontWeightMedium.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextAreaFunction_001 regular')
      await driver.assertComponentExist(BY.text('Regular', MatchPattern.CONTAINS))
      let fontWeightRegular = await driver.findComponent(BY.text('Regular', MatchPattern.CONTAINS))
      await fontWeightRegular.click()
      await driver.delayMs(1000)
      // 文本水平对齐方式
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextAreaFunction_001 startClick')
      await driver.assertComponentExist(BY.text('Start', MatchPattern.CONTAINS))
      let textAlignStart = await driver.findComponent(BY.text('Start', MatchPattern.CONTAINS))
      await textAlignStart.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextAreaFunction_001 endClick')
      await driver.assertComponentExist(BY.text('End', MatchPattern.CONTAINS))
      let textAlignEnd = await driver.findComponent(BY.text('End', MatchPattern.CONTAINS))
      await textAlignEnd.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextAreaFunction_001 centerClick')
      await driver.assertComponentExist(BY.text('Center', MatchPattern.CONTAINS))
      let textAlignCenter = await driver.findComponent(BY.text('Center', MatchPattern.CONTAINS))
      await textAlignCenter.click()
      await driver.delayMs(1000)
      await driver.pressBack()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TextAreaFunction_001 end')
    })

    /**
     * 基础组件-Divider
     */
    it(BUNDLE + 'DividerFunction_001', 0, async function () {
      hilog.info(DOMAIN, TAG, BUNDLE + 'DividerFunction_001 begin')
      let driver = await UiDriver.create()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'DividerFunction_001 clickDivider')
      await driver.assertComponentExist(BY.text('Divider', MatchPattern.CONTAINS))
      let btnDivider = await driver.findComponent(BY.text('Divider', MatchPattern.CONTAINS))
      await btnDivider.click()
      await driver.delayMs(1000)
      // divider组件的宽度
      hilog.info(DOMAIN, TAG, BUNDLE + 'DividerFunction_001 strokeWidthSlider')
      await driver.assertComponentExist(BY.key('strokeWidthSlider'))
      let strokeWidthSlider = await driver.findComponent(BY.key('strokeWidthSlider'))
      await strokeWidthSlider.click()
      await driver.delayMs(1000)
      // 分割线方向
      hilog.info(DOMAIN, TAG, BUNDLE + 'DividerFunction_001 vertical')
      await driver.assertComponentExist(BY.text('vertical', MatchPattern.CONTAINS))
      let vertical = await driver.findComponent(BY.text('vertical', MatchPattern.CONTAINS))
      await vertical.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'DividerFunction_001 horizontal')
      await driver.assertComponentExist(BY.text('horizontal', MatchPattern.CONTAINS))
      let horizontal = await driver.findComponent(BY.text('horizontal', MatchPattern.CONTAINS))
      await horizontal.click()
      await driver.delayMs(1000)
      // 端点样式
      hilog.info(DOMAIN, TAG, BUNDLE + 'DividerFunction_001 butt')
      await driver.assertComponentExist(BY.text('Butt', MatchPattern.CONTAINS))
      let lineCapButt = await driver.findComponent(BY.text('Butt', MatchPattern.CONTAINS))
      await lineCapButt.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'DividerFunction_001 round')
      await driver.assertComponentExist(BY.text('Round', MatchPattern.CONTAINS))
      let lineCapRound = await driver.findComponent(BY.text('Round', MatchPattern.CONTAINS))
      await lineCapRound.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'DividerFunction_001 square')
      await driver.assertComponentExist(BY.text('Square', MatchPattern.CONTAINS))
      let lineCapSquare = await driver.findComponent(BY.text('Square', MatchPattern.CONTAINS))
      await lineCapSquare.click()
      await driver.delayMs(1000)
      // 分割线颜色
      hilog.info(DOMAIN, TAG, BUNDLE + 'DividerFunction_001 red')
      await driver.assertComponentExist(BY.text('红色', MatchPattern.CONTAINS))
      let Red = await driver.findComponent(BY.text('红色', MatchPattern.CONTAINS))
      await Red.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'DividerFunction_001 yellow')
      await driver.assertComponentExist(BY.text('黄色', MatchPattern.CONTAINS))
      let Yellow = await driver.findComponent(BY.text('黄色', MatchPattern.CONTAINS))
      await Yellow.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'DividerFunction_001 green')
      await driver.assertComponentExist(BY.text('绿色', MatchPattern.CONTAINS))
      let Green = await driver.findComponent(BY.text('绿色', MatchPattern.CONTAINS))
      await Green.click()
      await driver.delayMs(1000)
      await driver.pressBack()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'DividerFunction_001 end')
    })

    /**
     * 基础组件-QRCode
     */
    it(BUNDLE + 'QRCodeFunction_001', 0, async function () {
      hilog.info(DOMAIN, TAG, BUNDLE + 'QRCodeFunction_001 begin')
      let driver = await UiDriver.create()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'QRCodeFunction_001 clickQRCode')
      await driver.assertComponentExist(BY.text('QRCode', MatchPattern.CONTAINS))
      let btnQRCode = await driver.findComponent(BY.text('QRCode', MatchPattern.CONTAINS))
      await btnQRCode.click()
      await driver.delayMs(1000)
      await driver.pressBack()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'QRCodeFunction_001 end')
    })

    /**
     * 基础组件-Blank
     */
    it(BUNDLE + 'BlankFunction_001', 0, async function () {
      hilog.info(DOMAIN, TAG, BUNDLE + 'BlankFunction_001 begin')
      let driver = await UiDriver.create()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'BlankFunction_001 clickBlank')
      await driver.assertComponentExist(BY.text('Blank', MatchPattern.CONTAINS))
      let btnBlank = await driver.findComponent(BY.text('Blank', MatchPattern.CONTAINS))
      await btnBlank.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'BlankFunction_001 front')
      await driver.assertComponentExist(BY.text('front', MatchPattern.CONTAINS))
      let blankFront = await driver.findComponent(BY.text('front', MatchPattern.CONTAINS))
      await blankFront.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'BlankFunction_001 middle')
      await driver.assertComponentExist(BY.text('middle', MatchPattern.CONTAINS))
      let blankMiddle = await driver.findComponent(BY.text('middle', MatchPattern.CONTAINS))
      await blankMiddle.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'BlankFunction_001 behind')
      await driver.assertComponentExist(BY.text('behind', MatchPattern.CONTAINS))
      let blankBehind = await driver.findComponent(BY.text('behind', MatchPattern.CONTAINS))
      await blankBehind.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'BlankFunction_001 blankSlider')
      await driver.assertComponentExist(BY.key('blankSlider'))
      let blankSlider = await driver.findComponent(BY.key('blankSlider'))
      await blankSlider.click()
      await driver.delayMs(2000)
      await driver.pressBack()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'BlankFunction_001 end')
    })

    /**
     * 基础组件-Marquee
     */
    it(BUNDLE + 'MarqueeFunction_001', 0, async function () {
      hilog.info(DOMAIN, TAG, BUNDLE + 'MarqueeFunction_001 begin')
      let driver = await UiDriver.create()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'MarqueeFunction_001 clickMarquee')
      await driver.assertComponentExist(BY.text('Marquee', MatchPattern.CONTAINS))
      let btnMarquee = await driver.findComponent(BY.text('Marquee', MatchPattern.CONTAINS))
      await btnMarquee.click()
      await driver.delayMs(1000)
      // 是否播放
      hilog.info(DOMAIN, TAG, BUNDLE + 'MarqueeFunction_001 start')
      await driver.assertComponentExist(BY.key('start'))
      let start = await driver.findComponent(BY.key('start'))
      await start.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'MarqueeFunction_001 stop')
      await driver.assertComponentExist(BY.key('stop'))
      let stop = await driver.findComponent(BY.key('stop'))
      await stop.click()
      await driver.delayMs(1000)
      await start.click()
      await driver.delayMs(1000)
      // 滚动步长
      hilog.info(DOMAIN, TAG, BUNDLE + 'MarqueeFunction_001 stepSlider')
      await driver.assertComponentExist(BY.key('stepSlider'))
      let stepSlider = await driver.findComponent(BY.key('stepSlider'))
      await stepSlider.click()
      await driver.delayMs(1000)
      // 滚动次数
      hilog.info(DOMAIN, TAG, BUNDLE + 'MarqueeFunction_001 loopSlider')
      await driver.assertComponentExist(BY.key('loopSlider'))
      let loopSlider = await driver.findComponent(BY.key('loopSlider'))
      await loopSlider.click()
      await driver.delayMs(10000)
      // 滚动方向
      hilog.info(DOMAIN, TAG, BUNDLE + 'MarqueeFunction_001 left')
      await driver.assertComponentExist(BY.key('left'))
      let btnLeft = await driver.findComponent(BY.key('left'))
      await btnLeft.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'MarqueeFunction_001 right')
      await driver.assertComponentExist(BY.key('right'))
      let btnRight = await driver.findComponent(BY.key('right'))
      await btnRight.click()
      await driver.delayMs(2000)
      await driver.pressBack()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'MarqueeFunction_001 end')
    })

    /**
     * 基础组件-toggle
     */
    it(BUNDLE + 'ToggleFunction_001', 0, async function () {
      hilog.info(DOMAIN, TAG, BUNDLE + 'ToggleFunction_001 begin')
      let driver = await UiDriver.create()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'ToggleFunction_001 clickToggle')
      await driver.assertComponentExist(BY.text('toggle', MatchPattern.CONTAINS))
      let btnToggle = await driver.findComponent(BY.text('toggle', MatchPattern.CONTAINS))
      await btnToggle.click()
      await driver.delayMs(1000)
      // 初始状态
      hilog.info(DOMAIN, TAG, BUNDLE + 'ToggleFunction_001 false')
      await driver.assertComponentExist(BY.key('false'))
      let btnFalse = await driver.findComponent(BY.key('false'))
      await btnFalse.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'ToggleFunction_001 true')
      await driver.assertComponentExist(BY.key('true'))
      let btnTrue = await driver.findComponent(BY.key('true'))
      await btnTrue.click()
      await driver.delayMs(1000)
      await driver.pressBack()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'ToggleFunction_001 end')
    })

    /**
     * 基础组件-Slider
     */
    it(BUNDLE + 'SliderFunction_001', 0, async function () {
      hilog.info(DOMAIN, TAG, BUNDLE + 'SliderFunction_001 begin')
      let driver = await UiDriver.create()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'SliderFunction_001 clickSlider')
      await driver.assertComponentExist(BY.text('Slider', MatchPattern.CONTAINS))
      let btnSlider = await driver.findComponent(BY.text('Slider', MatchPattern.CONTAINS))
      await btnSlider.click()
      await driver.delayMs(1000)
      // 当前进展
      hilog.info(DOMAIN, TAG, BUNDLE + 'SliderFunction_001 currentValueSlider')
      await driver.assertComponentExist(BY.key('currentValueSlider'))
      let currentValueSlider = await driver.findComponent(BY.key('currentValueSlider'))
      await currentValueSlider.click()
      await driver.delayMs(1000)
      // 最小值
      hilog.info(DOMAIN, TAG, BUNDLE + 'SliderFunction_001 minSlider')
      await driver.assertComponentExist(BY.key('minSlider'))
      let minSlider = await driver.findComponent(BY.key('minSlider'))
      await minSlider.click()
      await driver.delayMs(1000)
      // 最大值
      hilog.info(DOMAIN, TAG, BUNDLE + 'SliderFunction_001 maxSlider')
      await driver.assertComponentExist(BY.key('maxSlider'))
      let maxSlider = await driver.findComponent(BY.key('maxSlider'))
      await maxSlider.click()
      await driver.delayMs(1000)
      // 滑动跳动值
      hilog.info(DOMAIN, TAG, BUNDLE + 'SliderFunction_001 stepSlider')
      await driver.assertComponentExist(BY.key('stepSlider'))
      let stepSlider = await driver.findComponent(BY.key('stepSlider'))
      await stepSlider.click()
      await driver.delayMs(1000)
      // 滑块样式
      hilog.info(DOMAIN, TAG, BUNDLE + 'SliderFunction_001 inset')
      await driver.assertComponentExist(BY.text('Inset', MatchPattern.CONTAINS))
      let sliderStyleInset = await driver.findComponent(BY.text('Inset', MatchPattern.CONTAINS))
      await sliderStyleInset.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'SliderFunction_001 outset')
      await driver.assertComponentExist(BY.text('Outset', MatchPattern.CONTAINS))
      let sliderStyleOutset = await driver.findComponent(BY.text('Outset', MatchPattern.CONTAINS))
      await sliderStyleOutset.click()
      await driver.delayMs(1000)
      // 滑块颜色
      hilog.info(DOMAIN, TAG, BUNDLE + 'SliderFunction_001 green')
      await driver.assertComponentExist(BY.text('Green', MatchPattern.CONTAINS))
      let colorGreen = await driver.findComponent(BY.text('Green', MatchPattern.CONTAINS))
      await colorGreen.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'SliderFunction_001 orange')
      await driver.assertComponentExist(BY.text('Orange', MatchPattern.CONTAINS))
      let colorOrange = await driver.findComponent(BY.text('Orange', MatchPattern.CONTAINS))
      await colorOrange.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'SliderFunction_001 pink')
      await driver.assertComponentExist(BY.text('Pink', MatchPattern.CONTAINS))
      let colorPink = await driver.findComponent(BY.text('Pink', MatchPattern.CONTAINS))
      await colorPink.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'SliderFunction_001 yellow')
      await driver.assertComponentExist(BY.text('Yellow', MatchPattern.CONTAINS))
      let colorYellow = await driver.findComponent(BY.text('Yellow', MatchPattern.CONTAINS))
      await colorYellow.click()
      await driver.delayMs(1000)
      // 滑轨背景颜色
      let scrollBar = await driver.findComponent(BY.type('Scroll'))
      await scrollBar.scrollToBottom()
      // Green
      hilog.info(DOMAIN, TAG, BUNDLE + 'SliderFunction_001 trackColorGreen')
      await driver.assertComponentExist(BY.key('trackColorGreen'))
      let trackColorGreen = await driver.findComponent(BY.key('trackColorGreen'))
      await trackColorGreen.click()
      await driver.delayMs(1000)
      // Orange
      hilog.info(DOMAIN, TAG, BUNDLE + 'SliderFunction_001 trackColorOrange')
      await driver.assertComponentExist(BY.key('trackColorOrange'))
      let trackColorOrange = await driver.findComponent(BY.key('trackColorOrange'))
      await trackColorOrange.click()
      await driver.delayMs(1000)
      // Pink
      hilog.info(DOMAIN, TAG, BUNDLE + 'SliderFunction_001 trackColorPink')
      await driver.assertComponentExist(BY.key('trackColorPink'))
      let trackColorPink = await driver.findComponent(BY.key('trackColorPink'))
      await trackColorPink.click()
      await driver.delayMs(1000)
      // Yellow
      hilog.info(DOMAIN, TAG, BUNDLE + 'SliderFunction_001 trackColorYellow')
      await driver.assertComponentExist(BY.key('trackColorYellow'))
      let trackColorYellow = await driver.findComponent(BY.key('trackColorYellow'))
      await trackColorYellow.click()
      await driver.delayMs(1000)
      await driver.pressBack()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'SliderFunction_001 end')
    })

    /**
     * 基础组件-Menu
     */
    it(BUNDLE + 'MenuFunction_001', 0, async function () {
      hilog.info(DOMAIN, TAG, BUNDLE + 'MenuFunction_001 begin')
      let driver = await UiDriver.create()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'MenuFunction_001 clickMenu')
      await driver.assertComponentExist(BY.text('Menu', MatchPattern.CONTAINS))
      let btnMenu = await driver.findComponent(BY.text('Menu', MatchPattern.CONTAINS))
      await btnMenu.click()
      await driver.delayMs(1000)
      await driver.pressBack()
      await driver.delayMs(2000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'MenuFunction_001 end')
    })


    /**
     * 基础组件-Gauge
     */
    it(BUNDLE + 'GaugeFunction_001', 0, async function () {
      hilog.info(DOMAIN, TAG, BUNDLE + 'GaugeFunction_001 begin')
      let driver = await UiDriver.create()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'GaugeFunction_001 clickGauge')
      await driver.assertComponentExist(BY.text('Gauge', MatchPattern.CONTAINS))
      let btnGauge = await driver.findComponent(BY.text('Gauge', MatchPattern.CONTAINS))
      await btnGauge.click()
      await driver.delayMs(1000)
      // 当前数据值
      hilog.info(DOMAIN, TAG, BUNDLE + 'GaugeFunction_001 currentValueSlider')
      await driver.assertComponentExist(BY.key('currentValueSlider'))
      let currentValueSlider = await driver.findComponent(BY.key('currentValueSlider'))
      await currentValueSlider.click()
      await driver.delayMs(1000)
      // 当前数据段最小值
      hilog.info(DOMAIN, TAG, BUNDLE + 'GaugeFunction_001 minSlider')
      await driver.assertComponentExist(BY.key('minSlider'))
      let minSlider = await driver.findComponent(BY.key('minSlider'))
      await minSlider.click()
      await driver.delayMs(1000)
      // 当前数据段最大值
      hilog.info(DOMAIN, TAG, BUNDLE + 'GaugeFunction_001 maxSlider')
      await driver.assertComponentExist(BY.key('maxSlider'))
      let maxSlider = await driver.findComponent(BY.key('maxSlider'))
      await maxSlider.click()
      await driver.delayMs(1000)
      // 起始角度
      hilog.info(DOMAIN, TAG, BUNDLE + 'GaugeFunction_001 startAngle')
      await driver.assertComponentExist(BY.key('startAngle'))
      let startAngle = await driver.findComponent(BY.key('startAngle'))
      await startAngle.click()
      await driver.delayMs(1000)
      // 终止角度
      hilog.info(DOMAIN, TAG, BUNDLE + 'GaugeFunction_001 endAngle')
      await driver.assertComponentExist(BY.key('endAngle'))
      let endAngle = await driver.findComponent(BY.key('endAngle'))
      await endAngle.click()
      await driver.delayMs(2000)
      await driver.pressBack()
      await driver.delayMs(2000)
      await driver.pressBack()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'GaugeFunction_001 end')
    })

    /**
     * 容器组件
     */
    it(BUNDLE + 'ContainerFunction_001', 0, async function () {
      hilog.info(DOMAIN, TAG, BUNDLE + 'ContainerFunction_001 begin')
      let driver = await UiDriver.create()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'ContainerFunction_001 clickContainer')
      await driver.assertComponentExist(BY.text('容器组件', MatchPattern.CONTAINS))
      let btnContainer = await driver.findComponent(BY.text('容器组件', MatchPattern.CONTAINS))
      await btnContainer.click()
      await driver.delayMs(1000)
      // Panel
      hilog.info(DOMAIN, TAG, BUNDLE + 'ContainerFunction_001 clickPanel')
      await driver.assertComponentExist(BY.text('Panel', MatchPattern.CONTAINS))
      let btnPanel = await driver.findComponent(BY.text('Panel', MatchPattern.CONTAINS))
      await btnPanel.click()
      await driver.delayMs(1000)
      // 是否显示
      hilog.info(DOMAIN, TAG, BUNDLE + 'ContainerFunction_001 showPanelTrue')
      await driver.assertComponentExist(BY.key('showPanelTrue'))
      let showPanelTrue = await driver.findComponent(BY.key('showPanelTrue'))
      await showPanelTrue.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'ContainerFunction_001 showPanelFalse')
      await driver.assertComponentExist(BY.key('showPanelFalse'))
      let showPanelFalse = await driver.findComponent(BY.key('showPanelFalse'))
      await showPanelFalse.click()
      await driver.delayMs(1000)
      await showPanelTrue.click()
      await driver.delayMs(1000)
      // 可滑动面板类型
      hilog.info(DOMAIN, TAG, BUNDLE + 'ContainerFunction_001 minibar')
      await driver.assertComponentExist(BY.text('Minibar', MatchPattern.CONTAINS))
      let typeMinibar = await driver.findComponent(BY.text('Minibar', MatchPattern.CONTAINS))
      await typeMinibar.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'ContainerFunction_001 foldable')
      await driver.assertComponentExist(BY.text('Foldable', MatchPattern.CONTAINS))
      let typeFoldable = await driver.findComponent(BY.text('Foldable', MatchPattern.CONTAINS))
      await typeFoldable.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'ContainerFunction_001 temporary')
      await driver.assertComponentExist(BY.text('Temporary', MatchPattern.CONTAINS))
      let typeTemporary = await driver.findComponent(BY.text('Temporary', MatchPattern.CONTAINS))
      await typeTemporary.click()
      await driver.delayMs(1000)
      // 可滑动面板初始状态
      hilog.info(DOMAIN, TAG, BUNDLE + 'ContainerFunction_001 mini')
      await driver.assertComponentExist(BY.text('Mini', MatchPattern.CONTAINS))
      let modeMini = await driver.findComponent(BY.text('Mini', MatchPattern.CONTAINS))
      await modeMini.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'ContainerFunction_001 half')
      await driver.assertComponentExist(BY.text('Half', MatchPattern.CONTAINS))
      let modeHalf = await driver.findComponent(BY.text('Half', MatchPattern.CONTAINS))
      await modeHalf.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'ContainerFunction_001 full')
      await driver.assertComponentExist(BY.text('Full', MatchPattern.CONTAINS))
      let modeFull = await driver.findComponent(BY.text('Full', MatchPattern.CONTAINS))
      await modeFull.click()
      await driver.delayMs(1000)
      // dragBar
      hilog.info(DOMAIN, TAG, BUNDLE + 'ContainerFunction_001 dragBarTrue')
      await driver.assertComponentExist(BY.key('dragBarTrue'))
      let dragBarTrue = await driver.findComponent(BY.key('dragBarTrue'))
      await dragBarTrue.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'ContainerFunction_001 dragBarFalse')
      await driver.assertComponentExist(BY.key('dragBarFalse'))
      let dragBarFalse = await driver.findComponent(BY.key('dragBarFalse'))
      await dragBarFalse.click()
      await driver.delayMs(2000)
      await driver.pressBack()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'ContainerFunction_001 end')
    })

    /**
     * 容器组件-Navigator
     */
    it(BUNDLE + 'NavigatorFunction_001', 0, async function () {
      hilog.info(DOMAIN, TAG, BUNDLE + 'NavigatorFunction_001 begin')
      let driver = await UiDriver.create()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'NavigatorFunction_001 clickNavigator')
      await driver.assertComponentExist(BY.text('Navigator', MatchPattern.CONTAINS))
      let btnNavigator = await driver.findComponent(BY.text('Navigator', MatchPattern.CONTAINS))
      await btnNavigator.click()
      await driver.delayMs(1000)
      await driver.pressBack()
      await driver.delayMs(2000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'NavigatorFunction_001 end')
    })

    /**
     * 容器组件-Swiper
     */
    it(BUNDLE + 'SwiperFunction_001', 0, async function () {
      hilog.info(DOMAIN, TAG, BUNDLE + 'SwiperFunction_001 begin')
      let driver = await UiDriver.create()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'SwiperFunction_001 clickSwiper')
      await driver.assertComponentExist(BY.text('Swiper', MatchPattern.CONTAINS))
      let btnSwiper = await driver.findComponent(BY.text('Swiper', MatchPattern.CONTAINS))
      await btnSwiper.click()
      await driver.delayMs(1000)
      // 当前索引
      hilog.info(DOMAIN, TAG, BUNDLE + 'SwiperFunction_001 indexSlider')
      await driver.assertComponentExist(BY.key('indexSlider'))
      let indexSlider = await driver.findComponent(BY.key('indexSlider'))
      await indexSlider.click()
      await driver.delayMs(1000)
      // 播放间隔
      hilog.info(DOMAIN, TAG, BUNDLE + 'SwiperFunction_001 intervalSlider')
      await driver.assertComponentExist(BY.key('intervalSlider'))
      let intervalSlider = await driver.findComponent(BY.key('intervalSlider'))
      await intervalSlider.click()
      await driver.delayMs(1000)
      // 切换间隔
      hilog.info(DOMAIN, TAG, BUNDLE + 'SwiperFunction_001 durationSlider')
      await driver.assertComponentExist(BY.key('durationSlider'))
      let durationSlider = await driver.findComponent(BY.key('durationSlider'))
      await durationSlider.click()
      await driver.delayMs(1000)
      // 组件间隔
      hilog.info(DOMAIN, TAG, BUNDLE + 'SwiperFunction_001 itemSpaceSlider')
      await driver.assertComponentExist(BY.key('itemSpaceSlider'))
      let itemSpaceSlider = await driver.findComponent(BY.key('itemSpaceSlider'))
      await itemSpaceSlider.click()
      await driver.delayMs(1000)
      // 自动播放
      hilog.info(DOMAIN, TAG, BUNDLE + 'SwiperFunction_001 autoPlay')
      await driver.assertComponentExist(BY.key('autoPlay'))
      let autoPlay = await driver.findComponent(BY.key('autoPlay'))
      await autoPlay.click()
      await driver.delayMs(1000)
      await autoPlay.click()
      await driver.delayMs(1000)
      // 循环播放
      hilog.info(DOMAIN, TAG, BUNDLE + 'SwiperFunction_001 loop')
      await driver.assertComponentExist(BY.key('loop'))
      let loop = await driver.findComponent(BY.key('loop'))
      await loop.click()
      await driver.delayMs(1000)
      await loop.click()
      await driver.delayMs(1000)
      // 导航指示
      hilog.info(DOMAIN, TAG, BUNDLE + 'SwiperFunction_001 indexSlider')
      await driver.assertComponentExist(BY.key('indicator'))
      let indicator = await driver.findComponent(BY.key('indicator'))
      await indicator.click()
      await driver.delayMs(1000)
      await indicator.click()
      await driver.delayMs(2000)
      await driver.pressBack()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'SwiperFunction_001 end')
    })

    /**
     * 容器组件-Stack
     */
    it(BUNDLE + 'StackFunction_001', 0, async function () {
      hilog.info(DOMAIN, TAG, BUNDLE + 'StackFunction_001 begin')
      let driver = await UiDriver.create()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'StackFunction_001 clickStack')
      await driver.assertComponentExist(BY.text('Stack', MatchPattern.CONTAINS))
      let btnStack = await driver.findComponent(BY.text('Stack', MatchPattern.CONTAINS))
      await btnStack.click()
      await driver.delayMs(1000)
      // 可滑动面板类型
      hilog.info(DOMAIN, TAG, BUNDLE + 'StackFunction_001 topStartClick')
      await driver.assertComponentExist(BY.text('TopStart', MatchPattern.CONTAINS))
      let alignContentTopStart = await driver.findComponent(BY.text('TopStart', MatchPattern.CONTAINS))
      await alignContentTopStart.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'StackFunction_001 topClick')
      await driver.assertComponentExist(BY.text('Top', MatchPattern.CONTAINS))
      let alignContentTop = await driver.findComponent(BY.text('Top', MatchPattern.CONTAINS))
      await alignContentTop.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'StackFunction_001 topEndClick')
      await driver.assertComponentExist(BY.text('TopEnd', MatchPattern.CONTAINS))
      let alignContentTopEnd = await driver.findComponent(BY.text('TopEnd', MatchPattern.CONTAINS))
      await alignContentTopEnd.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'StackFunction_001 startClick')
      await driver.assertComponentExist(BY.text('Start', MatchPattern.CONTAINS))
      let alignContentStart = await driver.findComponent(BY.text('Start', MatchPattern.CONTAINS))
      await alignContentStart.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'StackFunction_001 centerClick')
      await driver.assertComponentExist(BY.text('Center', MatchPattern.CONTAINS))
      let alignContentCenter = await driver.findComponent(BY.text('Center', MatchPattern.CONTAINS))
      await alignContentCenter.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'StackFunction_001 endClick')
      await driver.assertComponentExist(BY.text('End', MatchPattern.CONTAINS))
      let alignContentEnd = await driver.findComponent(BY.text('End', MatchPattern.CONTAINS))
      await alignContentEnd.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'StackFunction_001 bottomStartClick')
      await driver.assertComponentExist(BY.text('BottomStart', MatchPattern.CONTAINS))
      let alignContentBottomStart = await driver.findComponent(BY.text('BottomStart', MatchPattern.CONTAINS))
      await alignContentBottomStart.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'StackFunction_001 bottomClick')
      await driver.assertComponentExist(BY.text('Bottom', MatchPattern.CONTAINS))
      let alignContentBottom = await driver.findComponent(BY.text('Bottom', MatchPattern.CONTAINS))
      await alignContentBottom.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'StackFunction_001 bottomEndClick')
      await driver.assertComponentExist(BY.text('BottomEnd', MatchPattern.CONTAINS))
      let alignContentBottomEnd = await driver.findComponent(BY.text('BottomEnd', MatchPattern.CONTAINS))
      await alignContentBottomEnd.click()
      await driver.delayMs(2000)
      await driver.pressBack()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'StackFunction_001 end')
    })

    /**
     * 容器组件-Column
     */
    it(BUNDLE + 'ColumnFunction_001', 0, async function () {
      hilog.info(DOMAIN, TAG, BUNDLE + 'ColumnFunction_001 begin')
      let driver = await UiDriver.create()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'ColumnFunction_001 clickColumn')
      await driver.assertComponentExist(BY.text('Column', MatchPattern.CONTAINS))
      let btnColumn = await driver.findComponent(BY.text('Column', MatchPattern.CONTAINS))
      await btnColumn.click()
      await driver.delayMs(1000)
      // 对齐方式
      hilog.info(DOMAIN, TAG, BUNDLE + 'ColumnFunction_001 alignItemsStart')
      await driver.assertComponentExist(BY.key('Start'))
      let alignItemsStart = await driver.findComponent(BY.key('Start'))
      await alignItemsStart.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'ColumnFunction_001 alignItemsCenter')
      await driver.assertComponentExist(BY.key('Center'))
      let alignItemsCenter = await driver.findComponent(BY.key('Center'))
      await alignItemsCenter.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'ColumnFunction_001 alignItemsEnd')
      await driver.assertComponentExist(BY.key('End'))
      let alignItemsEnd = await driver.findComponent(BY.key('End'))
      await alignItemsEnd.click()
      await driver.delayMs(1000)
      // space
      hilog.info(DOMAIN, TAG, BUNDLE + 'ColumnFunction_001 spaceSlider')
      await driver.assertComponentExist(BY.key('spaceSlider'))
      let spaceSlider = await driver.findComponent(BY.key('spaceSlider'))
      await spaceSlider.click()
      await driver.delayMs(1000)
      // 自定义纵向对齐方式
      hilog.info(DOMAIN, TAG, BUNDLE + 'ColumnFunction_001 customStart')
      await driver.assertComponentExist(BY.key('customStart'))
      let customStart = await driver.findComponent(BY.key('customStart'))
      await customStart.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'ColumnFunction_001 customCenter')
      await driver.assertComponentExist(BY.key('customCenter'))
      let customCenter = await driver.findComponent(BY.key('customCenter'))
      await customCenter.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'ColumnFunction_001 customEnd')
      await driver.assertComponentExist(BY.key('customEnd'))
      let customEnd = await driver.findComponent(BY.key('customEnd'))
      await customEnd.click()
      await driver.delayMs(1000)
      await driver.pressBack()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'ColumnFunction_001 end')
    })

    /**
     * 容器组件-Row
     */
    it(BUNDLE + 'RowFunction_001', 0, async function () {
      hilog.info(DOMAIN, TAG, BUNDLE + 'RowFunction_001 begin')
      let driver = await UiDriver.create()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'RowFunction_001 clickRow')
      await driver.assertComponentExist(BY.text('Row', MatchPattern.CONTAINS))
      let btnRow = await driver.findComponent(BY.text('Row', MatchPattern.CONTAINS))
      await btnRow.click()
      await driver.delayMs(1000)
      // 对齐方式
      hilog.info(DOMAIN, TAG, BUNDLE + 'RowFunction_001 alignItemsTop')
      await driver.assertComponentExist(BY.key('Top'))
      let alignItemsTop = await driver.findComponent(BY.key('Top'))
      await alignItemsTop.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'RowFunction_001 alignItemsCenter')
      await driver.assertComponentExist(BY.key('Center'))
      let alignItemsCenter = await driver.findComponent(BY.key('Center'))
      await alignItemsCenter.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'RowFunction_001 alignItemsBottom')
      await driver.assertComponentExist(BY.key('Bottom'))
      let alignItemsBottom = await driver.findComponent(BY.key('Bottom'))
      await alignItemsBottom.click()
      await driver.delayMs(1000)
      // space
      hilog.info(DOMAIN, TAG, BUNDLE + 'RowFunction_001 spaceSlider')
      await driver.assertComponentExist(BY.key('spaceSlider'))
      let spaceSlider = await driver.findComponent(BY.key('spaceSlider'))
      await spaceSlider.click()
      await driver.delayMs(1000)
      // 自定义横向对齐方式
      hilog.info(DOMAIN, TAG, BUNDLE + 'RowFunction_001 customCenter')
      await driver.assertComponentExist(BY.key('customCenter'))
      let customCenter = await driver.findComponent(BY.key('customCenter'))
      await customCenter.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'RowFunction_001 customStart')
      await driver.assertComponentExist(BY.key('customStart'))
      let customStart = await driver.findComponent(BY.key('customStart'))
      await customStart.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'RowFunction_001 customEnd')
      await driver.assertComponentExist(BY.key('customEnd'))
      let customEnd = await driver.findComponent(BY.key('customEnd'))
      await customEnd.click()
      await driver.delayMs(1000)
      await driver.pressBack()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'RowFunction_001 end')
    })

    /**
     * 容器组件-flex
     */
    it(BUNDLE + 'FlexFunction_001', 0, async function () {
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 begin')
      let driver = await UiDriver.create()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 clickFlex')
      await driver.assertComponentExist(BY.text('flex', MatchPattern.CONTAINS))
      let btnFlex = await driver.findComponent(BY.text('flex', MatchPattern.CONTAINS))
      await btnFlex.click()
      await driver.delayMs(1000)
      // 排列方向
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 directionRow')
      await driver.assertComponentExist(BY.text('Row', MatchPattern.CONTAINS))
      let directionRow = await driver.findComponent(BY.text('Row', MatchPattern.CONTAINS))
      await directionRow.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 directionRowReverse')
      await driver.assertComponentExist(BY.text('RowReverse', MatchPattern.CONTAINS))
      let directionRowReverse = await driver.findComponent(BY.text('RowReverse', MatchPattern.CONTAINS))
      await directionRowReverse.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 directionColumn')
      await driver.assertComponentExist(BY.text('Column', MatchPattern.CONTAINS))
      let directionColumn = await driver.findComponent(BY.text('Column', MatchPattern.CONTAINS))
      await directionColumn.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 directionColumnReverse')
      await driver.assertComponentExist(BY.text('ColumnReverse', MatchPattern.CONTAINS))
      let directionColumnReverse = await driver.findComponent(BY.text('ColumnReverse', MatchPattern.CONTAINS))
      await directionColumnReverse.click()
      await driver.delayMs(1000)
      // 主轴对齐
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 flexAlignStart')
      await driver.assertComponentExist(BY.key('flexAlignStart'))
      let flexAlignStart = await driver.findComponent(BY.key('flexAlignStart'))
      await flexAlignStart.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 flexAlignCenter')
      await driver.assertComponentExist(BY.key('flexAlignCenter'))
      let flexAlignCenter = await driver.findComponent(BY.key('flexAlignCenter'))
      await flexAlignCenter.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 flexAlignEnd')
      await driver.assertComponentExist(BY.key('flexAlignEnd'))
      let flexAlignEnd = await driver.findComponent(BY.key('flexAlignEnd'))
      await flexAlignEnd.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 flexAlignSpaceBetween')
      await driver.assertComponentExist(BY.key('flexAlignSpaceBetween'))
      let flexAlignSpaceBetween = await driver.findComponent(BY.key('flexAlignSpaceBetween'))
      await flexAlignSpaceBetween.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 flexAlignSpaceAround')
      await driver.assertComponentExist(BY.key('flexAlignSpaceAround'))
      let flexAlignSpaceAround = await driver.findComponent(BY.key('flexAlignSpaceAround'))
      await flexAlignSpaceAround.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 flexAlignSpaceEvenly')
      await driver.assertComponentExist(BY.key('flexAlignSpaceEvenly'))
      let flexAlignSpaceEvenly = await driver.findComponent(BY.key('flexAlignSpaceEvenly'))
      await flexAlignSpaceEvenly.click()
      await driver.delayMs(1000)
      // 多行对齐
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 alignContentStart')
      await driver.assertComponentExist(BY.key('alignContentStart'))
      let alignContentStart = await driver.findComponent(BY.key('alignContentStart'))
      await alignContentStart.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 alignContentCenter')
      await driver.assertComponentExist(BY.key('alignContentCenter'))
      let alignContentCenter = await driver.findComponent(BY.key('alignContentCenter'))
      await alignContentCenter.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 alignContentEnd')
      await driver.assertComponentExist(BY.key('alignContentEnd'))
      let alignContentEnd = await driver.findComponent(BY.key('alignContentEnd'))
      await alignContentEnd.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 alignContentSpaceBetween')
      await driver.assertComponentExist(BY.key('alignContentSpaceBetween'))
      let alignContentSpaceBetween = await driver.findComponent(BY.key('alignContentSpaceBetween'))
      await alignContentSpaceBetween.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 alignContentSpaceAround')
      await driver.assertComponentExist(BY.key('alignContentSpaceAround'))
      let alignContentSpaceAround = await driver.findComponent(BY.key('alignContentSpaceAround'))
      await alignContentSpaceAround.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 alignContentSpaceEvenly')
      await driver.assertComponentExist(BY.key('alignContentSpaceEvenly'))
      let alignContentSpaceEvenly = await driver.findComponent(BY.key('alignContentSpaceEvenly'))
      await alignContentSpaceEvenly.click()
      await driver.delayMs(1000)
      // 单行多行
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 wrapReverse')
      await driver.assertComponentExist(BY.text('WrapReverse', MatchPattern.CONTAINS))
      let wrapReverse = await driver.findComponent(BY.text('WrapReverse', MatchPattern.CONTAINS))
      await wrapReverse.click()
      await driver.delayMs(1000)
      // 主轴对齐
      await flexAlignStart.click()
      await driver.delayMs(1000)
      await flexAlignCenter.click()
      await driver.delayMs(1000)
      await flexAlignEnd.click()
      await driver.delayMs(1000)
      await flexAlignSpaceBetween.click()
      await driver.delayMs(1000)
      await flexAlignSpaceAround.click()
      await driver.delayMs(1000)
      await flexAlignSpaceEvenly.click()
      await driver.delayMs(1000)
      // 多行对齐
      await alignContentStart.click()
      await driver.delayMs(1000)
      await alignContentCenter.click()
      await driver.delayMs(1000)
      await alignContentEnd.click()
      await driver.delayMs(1000)
      await alignContentSpaceBetween.click()
      await driver.delayMs(1000)
      await alignContentSpaceAround.click()
      await driver.delayMs(1000)
      await alignContentSpaceEvenly.click()
      await driver.delayMs(1000)
      // 单行多行
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 noWrap')
      await driver.assertComponentExist(BY.text('NoWrap', MatchPattern.CONTAINS))
      let noWrap = await driver.findComponent(BY.text('NoWrap', MatchPattern.CONTAINS))
      await noWrap.click()
      await driver.delayMs(1000)
      // 主轴对齐
      await flexAlignStart.click()
      await driver.delayMs(1000)
      await flexAlignCenter.click()
      await driver.delayMs(1000)
      await flexAlignEnd.click()
      await driver.delayMs(1000)
      await flexAlignSpaceBetween.click()
      await driver.delayMs(1000)
      await flexAlignSpaceAround.click()
      await driver.delayMs(1000)
      await flexAlignSpaceEvenly.click()
      await driver.delayMs(1000)
      // 交叉轴对齐
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 itemAlignAuto')
      await driver.assertComponentExist(BY.key('Auto'))
      let itemAlignAuto = await driver.findComponent(BY.key('Auto'))
      await itemAlignAuto.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 itemAlignStart')
      await driver.assertComponentExist(BY.key('Start'))
      let itemAlignStart = await driver.findComponent(BY.key('Start'))
      await itemAlignStart.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 itemAlignCenter')
      await driver.assertComponentExist(BY.key('Center'))
      let itemAlignCenter = await driver.findComponent(BY.key('Center'))
      await itemAlignCenter.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 itemAlignEnd')
      await driver.assertComponentExist(BY.key('End'))
      let itemAlignEnd = await driver.findComponent(BY.key('End'))
      await itemAlignEnd.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 itemAlignStretch')
      await driver.assertComponentExist(BY.key('Stretch'))
      let itemAlignStretch = await driver.findComponent(BY.key('Stretch'))
      await itemAlignStretch.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 itemAlignBaseline')
      await driver.assertComponentExist(BY.key('Baseline'))
      let itemAlignBaseline = await driver.findComponent(BY.key('Baseline'))
      await itemAlignBaseline.click()
      await driver.delayMs(1000)
      await driver.delayMs(2000)
      await driver.pressBack()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'FlexFunction_001 end')
    })

    /**
     * 容器组件-Scroll
     */
    it(BUNDLE + 'ScrollFunction_001', 0, async function () {
      hilog.info(DOMAIN, TAG, BUNDLE + 'ScrollFunction_001 begin')
      let driver = await UiDriver.create()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'ScrollFunction_001 clickScroll')
      await driver.assertComponentExist(BY.text('Scroll', MatchPattern.CONTAINS))
      let btnScroll = await driver.findComponent(BY.text('Scroll', MatchPattern.CONTAINS))
      await btnScroll.click()
      await driver.delayMs(1000)
      await driver.pressBack()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'ScrollFunction_001 end')
    })

    /**
     * 容器组件-list
     */
    it(BUNDLE + 'ListFunction_001', 0, async function () {
      hilog.info(DOMAIN, TAG, BUNDLE + 'ListFunction_001 begin')
      let driver = await UiDriver.create()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'ListFunction_001 clickList')
      await driver.assertComponentExist(BY.text('list', MatchPattern.CONTAINS))
      let btnList = await driver.findComponent(BY.text('list', MatchPattern.CONTAINS))
      await btnList.click()
      await driver.delayMs(1000)
      // space
      hilog.info(DOMAIN, TAG, BUNDLE + 'ListFunction_001 spaceSlider')
      await driver.assertComponentExist(BY.key('spaceSlider'))
      let spaceSlider = await driver.findComponent(BY.key('spaceSlider'))
      await spaceSlider.click()
      await driver.delayMs(1000)
      await driver.pressBack()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'ListFunction_001 end')
    })

    /**
     * 容器组件-Badge
     */
    it(BUNDLE + 'BadgeFunction_001', 0, async function () {
      hilog.info(DOMAIN, TAG, BUNDLE + 'BadgeFunction_001 begin')
      let driver = await UiDriver.create()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'BadgeFunction_001 clickBadge')
      await driver.assertComponentExist(BY.text('Badge', MatchPattern.CONTAINS))
      let btnBadge = await driver.findComponent(BY.text('Badge', MatchPattern.CONTAINS))
      await btnBadge.click()
      await driver.delayMs(1000)
      // 提示类型
      // String
      hilog.info(DOMAIN, TAG, BUNDLE + 'BadgeFunction_001 badgeString')
      await driver.assertComponentExist(BY.text('String', MatchPattern.CONTAINS))
      let badgeString = await driver.findComponent(BY.text('String', MatchPattern.CONTAINS))
      await badgeString.click()
      await driver.delayMs(1000)
      await driver.pressBack()
      await driver.delayMs(1000)
    })

    /**
     * 容器组件-tab
     */
    it(BUNDLE + 'TabFunction_001', 0, async function () {
      hilog.info(DOMAIN, TAG, BUNDLE + 'TabFunction_001 begin')
      let driver = await UiDriver.create()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TabFunction_001 clickTab')
      await driver.assertComponentExist(BY.text('tab', MatchPattern.CONTAINS))
      let btnTab = await driver.findComponent(BY.text('tab', MatchPattern.CONTAINS))
      await btnTab.click()
      await driver.delayMs(1000)
      // 页签位置
      hilog.info(DOMAIN, TAG, BUNDLE + 'TabFunction_001 barPositionStart')
      await driver.assertComponentExist(BY.text('Start', MatchPattern.CONTAINS))
      let barPositionStart = await driver.findComponent(BY.text('Start', MatchPattern.CONTAINS))
      await barPositionStart.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TabFunction_001 barPositionEnd')
      await driver.assertComponentExist(BY.text('End', MatchPattern.CONTAINS))
      let barPositionEnd = await driver.findComponent(BY.text('End', MatchPattern.CONTAINS))
      await barPositionEnd.click()
      await driver.delayMs(1000)
      console.log("Sample_Component 293")
      // 控制器
      hilog.info(DOMAIN, TAG, BUNDLE + 'TabFunction_001 controllerSlider')
      await driver.assertComponentExist(BY.key('controllerSlider'))
      let controllerSlider = await driver.findComponent(BY.key('controllerSlider'))
      await controllerSlider.click()
      await driver.delayMs(1000)
      // 切换方向
      hilog.info(DOMAIN, TAG, BUNDLE + 'TabFunction_001 changeVertical')
      await driver.assertComponentExist(BY.key('changeVertical'))
      let changeVertical = await driver.findComponent(BY.key('changeVertical'))
      await changeVertical.click()
      await driver.delayMs(1000)
      // scrollable
      hilog.info(DOMAIN, TAG, BUNDLE + 'TabFunction_001 scrollable')
      await driver.assertComponentExist(BY.key('scrollable'))
      let scrollable = await driver.findComponent(BY.key('scrollable'))
      await scrollable.click()
      await driver.delayMs(1000)
      // 布局模式
      hilog.info(DOMAIN, TAG, BUNDLE + 'TabFunction_001 barModeScrollable')
      await driver.assertComponentExist(BY.text('Scrollable', MatchPattern.CONTAINS))
      let barModeScrollable = await driver.findComponent(BY.text('Scrollable', MatchPattern.CONTAINS))
      await barModeScrollable.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TabFunction_001 barModeFixed')
      await driver.assertComponentExist(BY.text('Fixed', MatchPattern.CONTAINS))
      let barModeFixed = await driver.findComponent(BY.text('Fixed', MatchPattern.CONTAINS))
      await barModeFixed.click()
      await driver.delayMs(1000)
      // 切换方向
      await changeVertical.click()
      await driver.delayMs(1000)
      // scrollable
      await scrollable.click()
      await driver.delayMs(1000)
      // 布局模式
      await barModeScrollable.click()
      await driver.delayMs(1000)
      await barModeFixed.click()
      await driver.delayMs(1000)
      await driver.pressBack()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'TabFunction_001 end')
    })

    /**
     * 容器组件-Counter
     */
    it(BUNDLE + 'CounterFunction_001', 0, async function () {
      hilog.info(DOMAIN, TAG, BUNDLE + 'CounterFunction_001 begin')
      let driver = await UiDriver.create()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'CounterFunction_001 clickCounter')
      await driver.assertComponentExist(BY.text('Counter', MatchPattern.CONTAINS))
      let btnCounter = await driver.findComponent(BY.text('Counter', MatchPattern.CONTAINS))
      await btnCounter.click()
      await driver.delayMs(1000)
      hilog.info(DOMAIN, TAG, BUNDLE + 'CounterFunction_001 end')
    })
  })
}