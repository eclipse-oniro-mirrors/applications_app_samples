/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { NavigationBar } from '../../../common/components/navigationBar'
import { GetColor } from '../../../common/components/getColor'

@Entry
@Component
struct BorderSample {
  @State value: string = 'hello world'
  @State color: Color = Color.Black
  @State borderStyle: string = 'Solid'
  @State borderWidth: number = 18
  @State borderColor: string = 'rgba(0,0,0,1)'
  @State borderRadius: number = 0

  build() {
    Column() {
      NavigationBar({ title: '边框设置' })
      Column() {
        Scroll() {
          Column() {
            Text(this.borderStyle)
              .textAlign(TextAlign.Center)
              .fontSize(35)
              .width('100%')
              .height('100%')
          }
          .width(300)
          .height(300)
          .alignItems(HorizontalAlign.Center)
          .justifyContent(FlexAlign.Center)
          .borderRadius(this.borderRadius)
          .borderWidth(this.borderWidth)
          .borderStyle(BorderStyle[this.borderStyle])
          .borderColor(this.borderColor)
        }
      }
      .width('100%')
      .constraintSize({ minHeight: 218, maxHeight: 402 })
      .padding({ left: 12, right: 12, top: 22, bottom: 22 })

      Scroll() {
        Column() {
          Row({ space: FlexAlign.SpaceBetween }) {
            Text('borderStyle')
              .fontSize('16fp')
              .opacity(0.5)
              .fontColor('#182431')
              .fontWeight(FontWeight.Medium)

            Blank()

            Column() {
              Text(`${this.borderStyle}`)
                .fontSize('16fp')
                .fontColor('#182431')
                .fontWeight(FontWeight.Medium)
                .width('50%')
                .textAlign(TextAlign.End)
            }
            .bindMenu([
              {
                value: 'Solid',
                action: () => {
                  this.borderStyle = 'Solid'
                }
              },
              {
                value: 'Dotted',
                action: () => {
                  this.borderStyle = 'Dotted'
                }
              },
              {
                value: 'Dashed',
                action: () => {
                  this.borderStyle = 'Dashed'
                }
              },
            ])
          }
          .alignItems(VerticalAlign.Center)
          .width('100%')
          .padding({ left: '3%', right: '3%', top: 12, bottom: 12 })
          .borderRadius(24)
          .backgroundColor('#FFFFFF')

          Column({ space: FlexAlign.SpaceAround }) {
            Row({ space: FlexAlign.SpaceBetween }) {
              Text('borderWidth')
                .fontSize('16fp')
                .opacity(0.5)
                .fontColor('#182431')
                .fontWeight(FontWeight.Medium)

              Blank()

              Text(this.borderWidth.toFixed(0))
                .fontSize('16fp')
                .fontColor('#182431')
                .fontWeight(FontWeight.Medium)
                .width('50%')
                .textAlign(TextAlign.End)
            }

            Slider({
              value: this.borderWidth,
              min: 0,
              max: 100,
              step: 1,
              style: SliderStyle.OutSet
            })
              .width('100%')
              .blockColor('#FFFFFF')
              .trackColor('#182431')
              .selectedColor('#007DFF')
              .showSteps(true)
              .showTips(true)
              .onChange((value: number, mode: SliderChangeMode) => {
                this.borderWidth = value
              })
          }
          .width('100%')
          .alignItems(HorizontalAlign.Center)
          .padding({ left: '3%', right: '3%', top: 12, bottom: 12 })
          .borderRadius(24)
          .backgroundColor('#FFFFFF')
          .margin({ top: 8 })

          Row({ space: FlexAlign.SpaceBetween }) {
            Text('color')
              .fontSize('16fp')
              .opacity(0.5)
              .fontColor('#182431')
              .fontWeight(FontWeight.Medium)

            Blank()

            Column() {
              Row() {
                GetColor({ colorVal: $borderColor })
              }.width(48).height(24)
            }
          }
          .width('100%')
          .alignItems(VerticalAlign.Center)
          .padding({ left: '3%', right: '3%', top: 12, bottom: 12 })
          .borderRadius(24)
          .backgroundColor('#FFFFFF')
          .margin({ top: 8 })

          Column({ space: FlexAlign.SpaceAround }) {
            Row({ space: FlexAlign.SpaceBetween }) {
              Text('borderRadius')
                .fontSize('16fp')
                .opacity(0.5)
                .fontColor('#182431')
                .fontWeight(FontWeight.Medium)
              Text(this.borderRadius.toFixed(0))
                .fontSize('16fp')
                .fontColor('#182431')
                .fontWeight(FontWeight.Medium)
                .width('50%')
                .textAlign(TextAlign.End)
            }

            Slider({
              value: this.borderRadius,
              min: 0,
              max: 150,
              step: 1,
              style: SliderStyle.OutSet
            })
              .width('100%')
              .blockColor('#FFFFFF')
              .trackColor('#182431')
              .selectedColor('#007DFF')
              .showSteps(true)
              .showTips(true)
              .onChange((value: number, mode: SliderChangeMode) => {
                this.borderRadius = value
              })
          }
          .alignItems(HorizontalAlign.Center)
          .width('100%')
          .padding({ left: '3%', right: '3%', top: 12, bottom: 12 })
          .borderRadius(24)
          .backgroundColor('#FFFFFF')
          .margin({ top: 8 })
        }.width('100%')
      }.width('100%').height('40%')
    }
    .alignItems(HorizontalAlign.Center)
    .justifyContent(FlexAlign.Start)
    .width('100%')
    .height('100%')
    .backgroundColor('#F1F3F5')
    .padding({ left: '3%', right: '3%', bottom: 10 })
  }

  pageTransition() {
    PageTransitionEnter({ duration: 370, curve: Curve.Friction })
      .slide(SlideEffect.Bottom)
      .opacity(0.0)

    PageTransitionExit({ duration: 370, curve: Curve.Friction })
      .slide(SlideEffect.Bottom)
      .opacity(0.0)
  }
}